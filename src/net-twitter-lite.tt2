package Net::Twitter::Lite;
use 5.005;
use warnings;
use strict;

our $VERSION = '[% VERSION %]';
$VERSION = eval { $VERSION };

use Carp;
use URI::Escape;
use JSON;
use HTTP::Request::Common;
use Net::Twitter::Lite::Error;
use Encode qw/encode_utf8/;

my $json_handler = JSON->new->utf8;

sub new {
    my ($class, %args) = @_;

    my $netrc = delete $args{netrc};
    my $new = bless {
        ssl                   => 1,
        apiurl                => 'https://api.twitter.com/1.1',
        searchapiurl          => 'https://api.twitter.com/1.1',
        search_trends_api_url => 'https://api.twitter.com/1.1',
        lists_api_url         => 'https://api.twitter.com/1.1',

        apirealm   => 'Twitter API',
        useragent  => __PACKAGE__ . "/$VERSION (Perl)",
        clientname => __PACKAGE__,
        clientver  => $VERSION,
        clienturl  => 'http://search.cpan.org/dist/Net-Twitter-Lite/',
        source     => 'twitterpm',

        useragent_class => 'LWP::UserAgent',
        useragent_args  => {},

        oauth_urls => {
            request_token_url	=> 'https://api.twitter.com/oauth/request_token',
            authentication_url	=> 'https://api.twitter.com/oauth/authenticate',
            authorization_url	=> 'https://api.twitter.com/oauth/authorize',
            access_token_url	=> 'https://api.twitter.com/oauth/access_token',
            xauth_url			=> 'https://api.twitter.com/oauth/access_token',
        },
        netrc_machine => 'api.twitter.com',
        
        %args
    }, $class;

    unless ( exists $new->{legacy_lists_api} ) {
        $new->{legacy_lists_api} = 0;
    }

    if ( delete $args{ssl} ) {
        $new->{$_} =~ s/^http:/https:/
            for qw/apiurl searchapiurl search_trends_api_url lists_api_url/;
    }

    # get username and password from .netrc
    if ( $netrc ) {
        eval { require Net::Netrc; 1 }
            || croak "Net::Netrc is required for the netrc option";

        my $host = $netrc eq '1' ? $new->{netrc_machine} : $netrc;
        my $nrc = Net::Netrc->lookup($host)
            || croak "No .netrc entry for $host";

        @{$new}{qw/username password/} = $nrc->lpa;
    }

    $new->{ua} ||= do {
        eval "use $new->{useragent_class}";
        croak $@ if $@;

        $new->{useragent_class}->new(%{$new->{useragent_args}});
    };

    $new->{ua}->agent($new->{useragent});
    $new->{ua}->default_header('X-Twitter-Client'         => $new->{clientname});
    $new->{ua}->default_header('X-Twitter-Client-Version' => $new->{clientver});
    $new->{ua}->default_header('X-Twitter-Client-URL'     => $new->{clienturl});
    $new->{ua}->env_proxy;

    $new->{_authenticator} = exists $new->{consumer_key}
                           ? '_oauth_authenticated_request'
                           : '_basic_authenticated_request';

    $new->credentials(@{$new}{qw/username password/})
        if exists $new->{username} && exists $new->{password};

    return $new;
}

sub credentials {
    my $self = shift;
    my ($username, $password) = @_;

    croak "exected a username and password" unless @_ == 2;
    croak "OAuth authentication is in use"  if exists $self->{consumer_key};

    $self->{username} = $username;
    $self->{password} = $password;

    my $uri = URI->new($self->{apiurl});
    my $netloc = join ':', $uri->host, $uri->port;

    $self->{ua}->credentials($netloc, $self->{apirealm}, $username, $password);
}

# This is a hack. Rather than making Net::OAuth an install requirement for
# Net::Twitter::Lite, require it at runtime if any OAuth methods are used.  It
# simply returns the string 'Net::OAuth' after successfully requiring
# Net::OAuth.
sub _oauth {
    my $self = shift;

    return $self->{_oauth} ||= do {
        eval "use Net::OAuth 0.25";
        croak "Install Net::OAuth 0.25 or later for OAuth support" if $@;

        eval '$Net::OAuth::PROTOCOL_VERSION = Net::OAuth::PROTOCOL_VERSION_1_0A';
        die $@ if $@;

        'Net::OAuth';
    };
}

# simple check to see if we have access tokens; does not check to see if they are valid
sub authorized {
    my $self = shift;

    return defined $self->{access_token} && $self->{access_token_secret};
}

# OAuth token accessors
for my $method ( qw/
            access_token
            access_token_secret
            request_token
            request_token_secret
        / ) {
    no strict 'refs';
    *{__PACKAGE__ . "::$method"} = sub {
        my $self = shift;

        $self->{$method} = shift if @_;
        return $self->{$method};
    };
}

# OAuth url accessors
for my $method ( qw/
            request_token_url
            authentication_url
            authorization_url
            access_token_url
            xauth_url
        / ) {
    no strict 'refs';
    *{__PACKAGE__ . "::$method"} = sub {
        my $self = shift;

        $self->{oauth_urls}{$method} = shift if @_;
        return URI->new($self->{oauth_urls}{$method});
    };
}

# get the athorization or authentication url
sub _get_auth_url {
    my ($self, $which_url, %params ) = @_;

    $self->_request_request_token(%params);

    my $uri = $self->$which_url;
    
    if ( $which_url eq 'authorization_url' ) {
    	$uri->query_form(oauth_token => $self->request_token, force_login => 'true');
    }
    else {
        $uri->query_form(oauth_token => $self->request_token);
    }
    return $uri;
}

# get the authentication URL from Twitter
sub get_authentication_url { return shift->_get_auth_url(authentication_url => @_) }

# get the authorization URL from Twitter
sub get_authorization_url { return shift->_get_auth_url(authorization_url => @_) }

# common portion of all oauth requests
sub _make_oauth_request {
    my ($self, $type, %params) = @_;

    my $request = $self->_oauth->request($type)->new(
        version          => '1.0',
        consumer_key     => $self->{consumer_key},
        consumer_secret  => $self->{consumer_secret},
        request_method   => 'GET',
        signature_method => 'HMAC-SHA1',
        timestamp        => time,
        nonce            => time ^ $$ ^ int(rand 2**32),
        %params,
    );

    $request->sign;

    return $request;
}

# called by get_authorization_url to obtain request tokens
sub _request_request_token {
    my ($self, %params) = @_;

    my $uri = $self->request_token_url;
    $params{callback} ||= 'oob';
    my $request = $self->_make_oauth_request(
        'request token',
        request_url => $uri,
        %params,
    );

    my $res = $self->{ua}->get($request->to_url);
    die "GET $uri failed: ".$res->status_line
        unless $res->is_success;

    # reuse $uri to extract parameters from the response content
    $uri->query($res->content);
    my %res_param = $uri->query_form;

    $self->request_token($res_param{oauth_token});
    $self->request_token_secret($res_param{oauth_token_secret});
}

# exchange request tokens for access tokens; call with (verifier => $verifier)
sub request_access_token {
    my ($self, %params ) = @_;

    my $uri = $self->access_token_url;
    my $request = $self->_make_oauth_request(
        'access token',
        request_url => $uri,
        token       => $self->request_token,
        token_secret => $self->request_token_secret,
        %params, # verifier => $verifier
    );

    my $res = $self->{ua}->get($request->to_url);
    die "GET $uri failed: ".$res->status_line
        unless $res->is_success;

    # discard request tokens, they're no longer valid
    delete $self->{request_token};
    delete $self->{request_token_secret};

    # reuse $uri to extract parameters from content
    $uri->query($res->content);
    my %res_param = $uri->query_form;

    return (
        $self->access_token($res_param{oauth_token}),
        $self->access_token_secret($res_param{oauth_token_secret}),
        $res_param{user_id},
        $res_param{screen_name},
    );
}

# exchange username and password for access tokens
sub xauth {
    my ( $self, $username, $password ) = @_;

    my $uri = $self->xauth_url;
    my $request = $self->_make_oauth_request(
        'XauthAccessToken',
        request_url     => $uri,
        x_auth_username => $username,
        x_auth_password => $password,
        x_auth_mode     => 'client_auth',
    );

    my $res = $self->{ua}->get($request->to_url);
    die "GET $uri failed: ".$res->status_line
        unless $res->is_success;

    # reuse $uri to extract parameters from content
    $uri->query($res->content);
    my %res_param = $uri->query_form;

    return (
        $self->access_token($res_param{oauth_token}),
        $self->access_token_secret($res_param{oauth_token_secret}),
        $res_param{user_id},
        $res_param{screen_name},
    );
}

# common call for both Basic Auth and OAuth
sub _authenticated_request {
    my $self = shift;

    my $authenticator = $self->{_authenticator};
    $self->$authenticator(@_);
}

sub _encode_args {
    my $args = shift;

    # Values need to be utf-8 encoded.  Because of a perl bug, exposed when
    # client code does "use utf8", keys must also be encoded.
    # see: http://www.perlmonks.org/?node_id=668987
    # and: http://perl5.git.perl.org/perl.git/commit/eaf7a4d2
    return { map { utf8::upgrade($_) unless ref($_); $_ } %$args };
}

sub _oauth_authenticated_request {
    my ($self, $http_method, $uri, $args, $authenticate) = @_;

    delete $args->{source}; # not necessary with OAuth requests

    my $is_multipart = grep { ref } %$args;

    my $msg;
    if ( $authenticate && $self->authorized ) {
        local $Net::OAuth::SKIP_UTF8_DOUBLE_ENCODE_CHECK = 1;

        my $request = $self->_make_oauth_request(
            'protected resource',
            request_url    => $uri,
            request_method => $http_method,
            token          => $self->access_token,
            token_secret   => $self->access_token_secret,
            extra_params   => $is_multipart ? {} : $args,
        );

        if ( $http_method =~ /^(?:GET|DELETE)$/ ) {
            $msg = HTTP::Request->new($http_method, $request->to_url);
        }
        elsif ( $http_method eq 'POST' ) {
            $msg = $is_multipart
                 ? POST($request->request_url,
                        Authorization => $request->to_authorization_header,
                        Content_Type  => 'form-data',
                        Content       => [ %$args ],
                   )
                 : POST($$uri, Content => $request->to_post_body)
                 ;
        }
        else {
            croak "unexpected http_method: $http_method";
        }
    }
    elsif ( $http_method eq 'GET' ) {
        $uri->query_form($args);
        $args = {};
        $msg = GET($uri);
    }
    elsif ( $http_method eq 'POST' ) {
        my $encoded_args = { %$args };
        _encode_args($encoded_args);
        $msg = $self->_mk_post_msg($uri, $args);
    }
    else {
        croak "unexpected http_method: $http_method";
    }

    return $self->{ua}->request($msg);
}

sub _basic_authenticated_request {
    my ($self, $http_method, $uri, $args, $authenticate) = @_;

    _encode_args($args);

    my $msg;
    if ( $http_method =~ /^(?:GET|DELETE)$/ ) {
        $uri->query_form($args);
        $msg = HTTP::Request->new($http_method, $uri);
    }
    elsif ( $http_method eq 'POST' ) {
        $msg = $self->_mk_post_msg($uri, $args);
    }
    else {
        croak "unexpected HTTP method: $http_method";
    }

    if ( $authenticate && $self->{username} && $self->{password} ) {
        $msg->headers->authorization_basic(@{$self}{qw/username password/});
    }

    return $self->{ua}->request($msg);
}

sub _mk_post_msg {
    my ($self, $uri, $args) = @_;

    # if any of the arguments are (array) refs, use form-data
    return (grep { ref } values %$args)
         ? POST($uri, Content_Type => 'form-data', Content => [ %$args ])
         : POST($uri, $args);
}

{ ### scope $api_def

my $api_def = [
    [ Lists => [
        [ 'legacy_add_list_member', {
            aliases         => [ qw// ],
            path            => ':user/:list_id/members',
            method          => 'POST',
            params          => [ qw/user list_id id/ ],
            required        => [ qw/user list_id id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_create_list', {
            aliases         => [ qw// ],
            path            => ':user/lists',
            method          => 'POST',
            params          => [ qw/user name mode description/ ],
            required        => [ qw/user name/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_delete_list', {
            aliases         => [ qw// ],
            path            => ':user/lists/:list_id',
            method          => 'DELETE',
            params          => [ qw/user list_id/ ],
            required        => [ qw/user list_id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_delete_list_member', {
            aliases         => [ qw/legacy_remove_list_member/ ],
            path            => ':user/:list_id/members',
            method          => 'DELETE',
            params          => [ qw/user list_id id/ ],
            required        => [ qw/user list_id id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_get_list', {
            aliases         => [ qw// ],
            path            => ':user/lists/:list_id',
            method          => 'GET',
            params          => [ qw/user list_id/ ],
            required        => [ qw/user list_id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_get_lists', {
            aliases         => [ qw/legacy_list_lists/ ],
            path            => ':user/lists',
            method          => 'GET',
            params          => [ qw/user cursor/ ],
            required        => [ qw/user/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_is_list_member', {
            aliases         => [ qw// ],
            path            => ':user/:list_id/members/:id',
            method          => 'GET',
            params          => [ qw/user list_id id/ ],
            required        => [ qw/user list_id id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_is_list_subscriber', {
            aliases         => [ qw/legacy_is_subscribed_list/ ],
            path            => ':user/:list_id/subscribers/:id',
            method          => 'GET',
            params          => [ qw/user list_id id/ ],
            required        => [ qw/user list_id id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_list_members', {
            aliases         => [ qw// ],
            path            => ':user/:list_id/members',
            method          => 'GET',
            params          => [ qw/user list_id id cursor/ ],
            required        => [ qw/user list_id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_list_memberships', {
            aliases         => [ qw// ],
            path            => ':user/lists/memberships',
            method          => 'GET',
            params          => [ qw/user cursor/ ],
            required        => [ qw/user/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_list_statuses', {
            aliases         => [ qw// ],
            path            => ':user/lists/:list_id/statuses',
            method          => 'GET',
            params          => [ qw/user list_id since_id max_id per_page page/ ],
            required        => [ qw/user list_id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_list_subscribers', {
            aliases         => [ qw// ],
            path            => ':user/:list_id/subscribers',
            method          => 'GET',
            params          => [ qw/user list_id id cursor/ ],
            required        => [ qw/user list_id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_list_subscriptions', {
            aliases         => [ qw// ],
            path            => ':user/lists/subscriptions',
            method          => 'GET',
            params          => [ qw/user cursor/ ],
            required        => [ qw/user/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_members_create_all', {
            aliases         => [ qw/legacy_add_list_members/ ],
            path            => ':user/:list_id/members/create_all',
            method          => 'POST',
            params          => [ qw/user list_id screen_name user_id/ ],
            required        => [ qw/user list_id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_subscribe_list', {
            aliases         => [ qw// ],
            path            => ':user/:list_id/subscribers',
            method          => 'POST',
            params          => [ qw/user list_id/ ],
            required        => [ qw/user list_id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_unsubscribe_list', {
            aliases         => [ qw// ],
            path            => ':user/:list_id/subscribers',
            method          => 'DELETE',
            params          => [ qw/user list_id/ ],
            required        => [ qw/user list_id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
        [ 'legacy_update_list', {
            aliases         => [ qw// ],
            path            => ':user/lists/:list_id',
            method          => 'POST',
            params          => [ qw/user list_id name mode description/ ],
            required        => [ qw/user list_id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'lists_api_url',
        } ],
    ] ],
    [ REST => [
# Timelines
        [ 'mentions', {
            aliases         => [ qw/replies/ ],
            path            => 'statuses/mentions_timeline',
            method          => 'GET',
            params          => [ qw/count since_id max_id trim_user contributor_details include_entities/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/trim_user contributor_details include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'user_timeline', {
            aliases         => [ qw// ],
            path            => 'statuses/user_timeline',
            method          => 'GET',
            params          => [ qw/user_id screen_name since_id count max_id trim_user exclude_replies contributor_details include_rts/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/trim_user exclude_replies contributor_details include_rts/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'home_timeline', {
            aliases         => [ qw// ],
            path            => 'statuses/home_timeline',
            method          => 'GET',
            params          => [ qw/count since_id max_id trim_user exclude_replies contributor_details include_entities/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/trim_user exclude_replies contributor_details include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'retweets_of_me', {
            aliases         => [ qw/retweeted_of_me/ ],
            path            => 'statuses/retweets_of_me',
            method          => 'GET',
            params          => [ qw/count since_id max_id trim_user include_entities include_user_entities/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/trim_user include_entities include_user_entities/ ],
            base_url_method => 'apiurl',
        } ],

# Tweets
        [ 'retweets', {
            aliases         => [ qw// ],
            path            => 'statuses/retweets/:id',
            method          => 'GET',
            params          => [ qw/id count trim_user/ ],
            required        => [ qw/id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/trim_user/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'show_status', {
            aliases         => [ qw// ],
            path            => 'statuses/show/:id',
            method          => 'GET',
            params          => [ qw/id trim_user include_my_retweet include_entities/ ],
            required        => [ qw/id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/trim_user include_my_retweet include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'destroy_status', {
            aliases         => [ qw// ],
            path            => 'statuses/destroy/:id',
            method          => 'POST',
            params          => [ qw/id trim_user/ ],
            required        => [ qw/id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/trim_user/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'update', {
            aliases         => [ qw// ],
            path            => 'statuses/update',
            method          => 'POST',
            params          => [ qw/status in_reply_to_status_id lat long place_id display_coordinates trim_user/ ],
            required        => [ qw/status/ ],
            add_source      => 1,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/display_coordinates trim_user/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'retweet', {
            aliases         => [ qw// ],
            path            => 'statuses/retweet/:id',
            method          => 'POST',
            params          => [ qw/id trim_user/ ],
            required        => [ qw/id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/trim_user/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'update_with_media', {
            aliases         => [ qw// ],
            path            => 'statuses/update_with_media',
            method          => 'POST',
            params          => [ qw/status media[] possibly_sensitive in_reply_to_status_id lat long place_id display_coordinates/ ],
            required        => [ qw/status media/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/possibly_sensitive display_coordinates/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'get_oembed', {
            aliases         => [ qw// ],
            path            => 'statuses/oembed',
            method          => 'GET',
            params          => [ qw/id url maxwidth hide_media hide_thread omit_script align related lang/ ],
            required        => [ qw/id url/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/hide_media hide_thread omit_script/ ],
            base_url_method => 'apiurl',
        } ],

# Direct Messages
        [ 'direct_messages', {
            aliases         => [ qw// ],
            path            => 'direct_messages',
            method          => 'GET',
            params          => [ qw/since_id max_id count include_entities skip_status/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'sent_direct_messages', {
            aliases         => [ qw// ],
            path            => 'direct_messages/sent',
            method          => 'GET',
            params          => [ qw/since_id max_id count page include_entities/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'show_direct_message', {
            aliases         => [ qw// ],
            path            => 'direct_messages/show',
            method          => 'GET',
            params          => [ qw/id/ ],
            required        => [ qw/id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'destroy_direct_message', {
            aliases         => [ qw// ],
            path            => 'direct_messages/destroy',
            method          => 'POST',
            params          => [ qw/id include_entities/ ],
            required        => [ qw/id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'new_direct_message', {
            aliases         => [ qw// ],
            path            => 'direct_messages/new',
            method          => 'POST',
            params          => [ qw/user_id screen_name text/ ],
            required        => [ qw/text/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],

# Friends & Followers
        [ 'no_retweet_ids', {
            aliases         => [ qw// ],
            path            => 'friendships/no_retweets/ids',
            method          => 'GET',
            params          => [ qw/stringify_ids/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/stringify_ids/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'friends_ids', {
            aliases         => [ qw/following_ids/ ],
            path            => 'friends/ids',
            method          => 'GET',
            params          => [ qw/user_id screen_name cursor stringify_ids count/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/stringify_ids/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'followers_ids', {
            aliases         => [ qw// ],
            path            => 'followers/ids',
            method          => 'GET',
            params          => [ qw/user_id screen_name cursor stringify_ids count/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/stringify_ids/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'lookup_friendships', {
            aliases         => [ qw// ],
            path            => 'friendships/lookup',
            method          => 'GET',
            params          => [ qw/screen_name user_id/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'friendships_incoming', {
            aliases         => [ qw// ],
            path            => 'friendships/incoming',
            method          => 'GET',
            params          => [ qw/cursor stringify_ids/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/stringify_ids/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'friendships_outgoing', {
            aliases         => [ qw// ],
            path            => 'friendships/outgoing',
            method          => 'GET',
            params          => [ qw/cursor stringify_ids/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/stringify_ids/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'create_friend', {
            aliases         => [ qw/follow_new/ ],
            path            => 'friendships/create',
            method          => 'POST',
            params          => [ qw/screen_name user_id follow/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/follow/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'destroy_friend', {
            aliases         => [ qw/unfollow/ ],
            path            => 'friendships/destroy',
            method          => 'POST',
            params          => [ qw/screen_name user_id/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'update_friendship', {
            aliases         => [ qw// ],
            path            => 'friendships/update',
            method          => 'POST',
            params          => [ qw/screen_name user_id device retweets/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/device retweets/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'show_friendship', {
            aliases         => [ qw/show_relationship/ ],
            path            => 'friendships/show',
            method          => 'GET',
            params          => [ qw/source_id source_screen_name target_id target_screen_name/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'friends_list', {
            aliases         => [ qw// ],
            path            => 'friends/list',
            method          => 'GET',
            params          => [ qw/user_id screen_name cursor skip_status include_user_entities/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/skip_status include_user_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'followers_list', {
            aliases         => [ qw// ],
            path            => 'followers/list',
            method          => 'GET',
            params          => [ qw/user_id screen_name cursor skip_status include_user_entities/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/skip_status include_user_entities/ ],
            base_url_method => 'apiurl',
        } ],

# Users
        [ 'account_settings', {
            aliases         => [ qw// ],
            path            => 'account/settings',
            method          => 'GET',
            params          => [ qw// ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'verify_credentials', {
            aliases         => [ qw// ],
            path            => 'account/verify_credentials',
            method          => 'GET',
            params          => [ qw/include_entities skip_status/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities skip_status/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'update_account_settings', {
            aliases         => [ qw// ],
            path            => 'account/settings',
            method          => 'POST',
            params          => [ qw/trend_location_woeid sleep_time_enabled start_sleep_time end_sleep_time time_zone lang/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/sleep_time_enabled/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'update_delivery_device', {
            aliases         => [ qw// ],
            path            => 'account/update_delivery_device',
            method          => 'POST',
            params          => [ qw/device include_entities/ ],
            required        => [ qw/device/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'update_profile', {
            aliases         => [ qw// ],
            path            => 'account/update_profile',
            method          => 'POST',
            params          => [ qw/name url location description include_entities skip_status/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'update_profile_background_image', {
            aliases         => [ qw// ],
            path            => 'account/update_profile_background_image',
            method          => 'POST',
            params          => [ qw/image tile include_entities skip_status use/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'update_profile_colors', {
            aliases         => [ qw// ],
            path            => 'account/update_profile_colors',
            method          => 'POST',
            params          => [ qw/profile_background_color profile_link_color profile_sidebar_border_color profile_sidebar_fill_color profile_text_color include_entities skip_status/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'update_profile_image', {
            aliases         => [ qw// ],
            path            => 'account/update_profile_image',
            method          => 'POST',
            params          => [ qw/image include_entities skip_status/ ],
            required        => [ qw/image/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'blocking', {
            aliases         => [ qw// ],
            path            => 'blocks/list',
            method          => 'GET',
            params          => [ qw/include_entities skip_status cursor/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'blocking_ids', {
            aliases         => [ qw// ],
            path            => 'blocks/ids',
            method          => 'GET',
            params          => [ qw/stringify_ids cursor/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/stringify_ids/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'create_block', {
            aliases         => [ qw// ],
            path            => 'blocks/create',
            method          => 'POST',
            params          => [ qw/screen_name user_id include_entities skip_status/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'destroy_block', {
            aliases         => [ qw// ],
            path            => 'blocks/destroy',
            method          => 'POST',
            params          => [ qw/screen_name user_id include_entities skip_status/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'lookup_users', {
            aliases         => [ qw// ],
            path            => 'users/lookup',
            method          => 'GET',
            params          => [ qw/screen_name user_id include_entities/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'show_user', {
            aliases         => [ qw// ],
            path            => 'users/show',
            method          => 'GET',
            params          => [ qw/user_id screen_name include_entities/ ],
            required        => [ qw/user_id screen_name/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'users_search', {
            aliases         => [ qw/find_people search_users/ ],
            path            => 'users/search',
            method          => 'GET',
            params          => [ qw/q page count include_entities/ ],
            required        => [ qw/q/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'contributees', {
            aliases         => [ qw// ],
            path            => 'users/contributees',
            method          => 'GET',
            params          => [ qw/user_id screen_name include_entities skip_status/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'contributors', {
            aliases         => [ qw// ],
            path            => 'users/contributors',
            method          => 'GET',
            params          => [ qw/user_id screen_name include_entities skip_status/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'remove_profile_banner', {
            aliases         => [ qw// ],
            path            => 'account/remove_profile_banner',
            method          => 'POST',
            params          => [ qw// ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'update_profile_banner', {
            aliases         => [ qw// ],
            path            => 'account/update_profile_banner',
            method          => 'POST',
            params          => [ qw/banner width height offset_left offset_top/ ],
            required        => [ qw/banner/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'users_profile_banner', {
            aliases         => [ qw// ],
            path            => 'users/profile_banner',
            method          => 'GET',
            params          => [ qw/user_id screen_name/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],

# Suggested Users
        [ 'user_suggestions', {
            aliases         => [ qw/follow_suggestions/ ],
            path            => 'users/suggestions/:slug',
            method          => 'GET',
            params          => [ qw/slug lang/ ],
            required        => [ qw/slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'suggestion_categories', {
            aliases         => [ qw// ],
            path            => 'users/suggestions',
            method          => 'GET',
            params          => [ qw/lang/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'user_suggestions_statuses', {
            aliases         => [ qw// ],
            path            => 'users/suggestions/:slug/members',
            method          => 'GET',
            params          => [ qw/slug/ ],
            required        => [ qw/slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],

# Favorites
        [ 'favorites', {
            aliases         => [ qw// ],
            path            => 'favorites/list',
            method          => 'GET',
            params          => [ qw/user_id screen_name count since_id max_id include_entities/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'destroy_favorite', {
            aliases         => [ qw// ],
            path            => 'favorites/destroy',
            method          => 'POST',
            params          => [ qw/id include_entities/ ],
            required        => [ qw/id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'create_favorite', {
            aliases         => [ qw// ],
            path            => 'favorites/create',
            method          => 'POST',
            params          => [ qw/id include_entities/ ],
            required        => [ qw/id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],

# Lists
        [ 'all_subscriptions', {
            aliases         => [ qw/all_lists list_subscriptions/ ],
            path            => 'lists/list',
            method          => 'GET',
            params          => [ qw/user_id screen_name/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'list_statuses', {
            aliases         => [ qw// ],
            path            => 'lists/statuses',
            method          => 'GET',
            params          => [ qw/list_id slug owner_screen_name owner_id since_id max_id count include_entities include_rts/ ],
            required        => [ qw/list_id slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'delete_list_member', {
            aliases         => [ qw/remove_list_member/ ],
            path            => 'lists/members/destroy',
            method          => 'POST',
            params          => [ qw/list_id slug user_id screen_name owner_screen_name owner_id/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'list_memberships', {
            aliases         => [ qw/listed_ids/ ],
            path            => 'lists/memberships',
            method          => 'GET',
            params          => [ qw/user_id screen_name cursor filter_to_owned_lists/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'list_subscribers', {
            aliases         => [ qw// ],
            path            => 'lists/subscribers',
            method          => 'GET',
            params          => [ qw/list_id slug owner_screen_name owner_id cursor include_entities skip_status/ ],
            required        => [ qw/list_id slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'subscribe_list', {
            aliases         => [ qw// ],
            path            => 'lists/subscribers/create',
            method          => 'POST',
            params          => [ qw/owner_screen_name owner_id list_id slug/ ],
            required        => [ qw/list_id slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'is_list_subscriber', {
            aliases         => [ qw/is_subscribed_list/ ],
            path            => 'lists/subscribers/show',
            method          => 'GET',
            params          => [ qw/owner_screen_name owner_id list_id slug user_id screen_name include_entities skip_status/ ],
            required        => [ qw/list_id slug user_id screen_name/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'unsubscribe_list', {
            aliases         => [ qw// ],
            path            => 'lists/subscribers/destroy',
            method          => 'POST',
            params          => [ qw/list_id slug owner_screen_name owner_id/ ],
            required        => [ qw/list_id slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'members_create_all', {
            aliases         => [ qw/add_list_members/ ],
            path            => 'lists/members/create_all',
            method          => 'POST',
            params          => [ qw/list_id slug user_id screen_name owner_screen_name owner_id/ ],
            required        => [ qw/list_id slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'is_list_member', {
            aliases         => [ qw// ],
            path            => 'lists/members/show',
            method          => 'GET',
            params          => [ qw/list_id slug user_id screen_name owner_screen_name owner_id include_entities skip_status/ ],
            required        => [ qw/list_id slug user_id screen_name/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'list_members', {
            aliases         => [ qw// ],
            path            => 'lists/members',
            method          => 'GET',
            params          => [ qw/list_id slug owner_screen_name owner_id cursor include_entities skip_status/ ],
            required        => [ qw/list_id slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'apiurl',
        } ],
        [ 'add_list_member', {
            aliases         => [ qw// ],
            path            => 'lists/members/create',
            method          => 'POST',
            params          => [ qw/list_id slug user_id screen_name owner_screen_name owner_id/ ],
            required        => [ qw/list_id slug user_id screen_name/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'delete_list', {
            aliases         => [ qw// ],
            path            => 'lists/destroy',
            method          => 'POST',
            params          => [ qw/owner_screen_name owner_id list_id slug/ ],
            required        => [ qw/list_id slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'update_list', {
            aliases         => [ qw// ],
            path            => 'lists/update',
            method          => 'POST',
            params          => [ qw/list_id slug name mode description owner_screen_name owner_id/ ],
            required        => [ qw/list_id slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'create_list', {
            aliases         => [ qw// ],
            path            => 'lists/create',
            method          => 'POST',
            params          => [ qw/name mode description/ ],
            required        => [ qw/name/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'get_list', {
            aliases         => [ qw// ],
            path            => 'lists/show',
            method          => 'GET',
            params          => [ qw/list_id slug owner_screen_name owner_id/ ],
            required        => [ qw/list_id slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'subscriptions', {
            aliases         => [ qw// ],
            path            => 'lists/subscriptions',
            method          => 'GET',
            params          => [ qw/user_id screen_name count cursor/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'members_destroy_all', {
            aliases         => [ qw/remove_list_members/ ],
            path            => 'lists/members/destroy_all',
            method          => 'POST',
            params          => [ qw/list_id slug user_id screen_name owner_screen_name owner_id/ ],
            required        => [ qw/list_id slug/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],

# Saved Searches
        [ 'saved_searches', {
            aliases         => [ qw// ],
            path            => 'saved_searches/list',
            method          => 'GET',
            params          => [ qw// ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'show_saved_search', {
            aliases         => [ qw// ],
            path            => 'saved_searches/show/:id',
            method          => 'GET',
            params          => [ qw/id/ ],
            required        => [ qw/id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'create_saved_search', {
            aliases         => [ qw// ],
            path            => 'saved_searches/create',
            method          => 'POST',
            params          => [ qw/query/ ],
            required        => [ qw/query/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'destroy_saved_search', {
            aliases         => [ qw// ],
            path            => 'saved_searches/destroy/:id',
            method          => 'POST',
            params          => [ qw/id/ ],
            required        => [ qw/id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],

# Places & Geo
        [ 'geo_id', {
            aliases         => [ qw// ],
            path            => 'geo/id/:place_id',
            method          => 'GET',
            params          => [ qw/place_id/ ],
            required        => [ qw/place_id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'reverse_geocode', {
            aliases         => [ qw// ],
            path            => 'geo/reverse_geocode',
            method          => 'GET',
            params          => [ qw/lat long accuracy granularity max_results callback/ ],
            required        => [ qw/lat long/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'geo_search', {
            aliases         => [ qw// ],
            path            => 'geo/search',
            method          => 'GET',
            params          => [ qw/lat long query ip granularity accuracy max_results contained_within attribute:street_address callback/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'similar_places', {
            aliases         => [ qw// ],
            path            => 'geo/similar_places',
            method          => 'GET',
            params          => [ qw/lat long name contained_within attribute:street_address callback/ ],
            required        => [ qw/lat long name/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'add_place', {
            aliases         => [ qw// ],
            path            => 'geo/place',
            method          => 'POST',
            params          => [ qw/name contained_within token lat long attribute:street_address callback/ ],
            required        => [ qw/name contained_within token lat long/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],

# Trends
        [ 'trends', {
            path            => 'trends/place',
            method          => 'GET',
            params          => [ qw/id exclude/ ],
            required        => [ qw/id/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'trends_available', {
            aliases         => [ qw// ],
            path            => 'trends/available',
            method          => 'GET',
            params          => [ qw// ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'trends_closest', {
            aliases         => [ qw// ],
            path            => 'trends/closest',
            method          => 'GET',
            params          => [ qw/lat long/ ],
            required        => [ qw/lat long/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],

# Spam Reporting
        [ 'report_spam', {
            aliases         => [ qw// ],
            path            => 'users/report_spam',
            method          => 'POST',
            params          => [ qw/screen_name user_id/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],

# Help
        [ 'get_configuration', {
            aliases         => [ qw// ],
            path            => 'help/configuration',
            method          => 'GET',
            params          => [ qw// ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'get_languages', {
            aliases         => [ qw// ],
            path            => 'help/languages',
            method          => 'GET',
            params          => [ qw// ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'get_privacy', {
            aliases         => [ qw// ],
            path            => 'help/privacy',
            method          => 'GET',
            params          => [ qw// ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'get_tos', {
            aliases         => [ qw// ],
            path            => 'help/tos',
            method          => 'GET',
            params          => [ qw// ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
        [ 'rate_limit_status', {
            aliases         => [ qw// ],
            path            => 'application/rate_limit_status',
            method          => 'GET',
            params          => [ qw/resources/ ],
            required        => [ qw// ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw// ],
            base_url_method => 'apiurl',
        } ],
    ] ],

# Search
    [ Search => [
        [ 'search', {
            aliases         => [ qw// ],
            path            => 'search/tweets',
            method          => 'GET',
            params          => [ qw/q geocode lang locale result_type count until since_id max_id include_entities callback/ ],
            required        => [ qw/q/ ],
            add_source      => 0,
            deprecated      => 0,
            authenticate    => 1,
            booleans        => [ qw/include_entities/ ],
            base_url_method => 'searchapiurl',
        } ],
    ] ],
];

my $with_url_arg = sub {
    my ($path, $args) = @_;

    if ( defined(my $id = delete $args->{id}) ) {
        $path .= uri_escape($id);
    }
    else {
        chop($path);
    }
    return $path;
};

while ( @$api_def ) {
    my $api = shift @$api_def;
    my $api_name = shift @$api;
    my $methods = shift @$api;

    for my $method ( @$methods ) {
        my $name    = shift @$method;
        my %options = %{ shift @$method };

        my ($arg_names, $path) = @options{qw/required path/};
        $arg_names = $options{params} if @$arg_names == 0 && @{$options{params}} == 1;

        my $modify_path = $path =~ s,/id$,/, ? $with_url_arg : sub { $_[0] };

        my $code = sub {
            my $self = shift;

            # copy callers args since we may add ->{source}
            my $args = ref $_[-1] eq 'HASH' ? { %{pop @_} } : {};

            if ( (my $legacy_method = $self->can("legacy_$name")) && (
                    exists $$args{-legacy_lists_api} ? delete $$args{-legacy_lists_api}
                        : $self->{legacy_lists_api} ) ) {
                return $self->$legacy_method(@_, $args);
            }

            # just in case it's included where it shouldn't be:
            delete $args->{-legacy_lists_api};

            croak sprintf "$name expected %d args", scalar @$arg_names if @_ > @$arg_names;

            # promote positional args to named args
            for ( my $i = 0; @_; ++$i ) {
                my $param = $arg_names->[$i];
                croak "duplicate param $param: both positional and named"
                    if exists $args->{$param};

                $args->{$param} = shift;
            }

            $args->{source} ||= $self->{source} if $options{add_source};

            my $authenticate = exists $args->{authenticate}  ? delete $args->{authenticate}
                             : $options{authenticate}
                             ;
            # promote boolean parameters
            for my $boolean_arg ( @{ $options{booleans} } ) {
                if ( exists $args->{$boolean_arg} ) {
                    next if $args->{$boolean_arg} =~ /^true|false$/;
                    $args->{$boolean_arg} = $args->{$boolean_arg} ? 'true' : 'false';
                }
            }

            # Workaround Twitter bug: any value passed for skip_user is treated as true.
            # The only way to get 'false' is to not pass the skip_user at all.
            delete $args->{skip_user} if exists $args->{skip_user} && $args->{skip_user} eq 'false';

            # replace placeholder arguments
            my $local_path = $path;
            $local_path =~ s,/:id$,, unless exists $args->{id}; # remove optional trailing id
            $local_path =~ s/:(\w+)/delete $args->{$1} or croak "required arg '$1' missing"/eg;

            # stringify lists
            for ( qw/screen_name user_id/ ) {
                $args->{$_} = join(',' => @{ $args->{$_} }) if ref $args->{$_} eq 'ARRAY';
            }

            my $uri = URI->new($self->{$options{base_url_method}} . "/$local_path.json");

            return $self->_parse_result(
                $self->_authenticated_request($options{method}, $uri, $args, $authenticate)
            );
        };

        no strict 'refs';
        $name = $_, *{__PACKAGE__ . "::$_"} = $code for $name, @{$options{aliases}};
    }
}

# catch expected error and promote it to an undef
for ( qw/list_members is_list_member list_subscribers is_list_subscriber
        legacy_list_members legacy_is_list_member legacy_list_subscribers legacy_is_list_subscriber/ ) {
    my $orig = __PACKAGE__->can($_) or die;

    my $code = sub {
        my $r = eval { $orig->(@_) };
        if ( $@ ) {
            return if $@ =~ /The specified user is not a (?:memb|subscrib)er of this list/;

            die $@;
        }

        return $r;
    };

    no strict 'refs';
    no warnings 'redefine';
    *{__PACKAGE__ . "::$_"} = $code;
}

} ### end scope for $api_def

sub _from_json {
    my ($self, $json) = @_;

    return eval { $json_handler->decode($json) };
}

sub _parse_result {
    my ($self, $res) = @_;

    # workaround for Laconica API returning bools as strings
    # (Fixed in Laconi.ca 0.7.4)
    my $content = $res->content;
    $content =~ s/^"(true|false)"$/$1/;

    my $obj = $self->_from_json($content);

    # Twitter sometimes returns an error with status code 200
    if ( $obj && ref $obj eq 'HASH' && exists $obj->{error} ) {
        die Net::Twitter::Lite::Error->new(twitter_error => $obj, http_response => $res);
    }

    return $obj if $res->is_success && defined $obj;

    my $error = Net::Twitter::Lite::Error->new(http_response => $res);
    $error->twitter_error($obj) if ref $obj;

    die $error;
}

1;

__END__

=head1 NAME

Net::Twitter::Lite - A perl interface to the Twitter API

=head1 VERSION

This document describes Net::Twitter::Lite version [% VERSION %]

=head1 SYNOPSIS

  use Net::Twitter::Lite;

  my $nt = Net::Twitter::Lite->new(
      username => $user,
      password => $password
      legacy_lists_api => 0,
  );

  my $result = eval { $nt->update('Hello, world!') };

  eval {
      my $statuses = $nt->friends_timeline({ since_id => $high_water, count => 100 });
      for my $status ( @$statuses ) {
          print "$status->{created_at} <$status->{user}{screen_name}> $status->{text}\n";
      }
  };
  warn "$@\n" if $@;


=head1 DESCRIPTION

This module provides a perl interface to the Twitter APIs. It uses the same API definitions
as L<Net::Twitter>, but without the extra bells and whistles and without the additional dependencies.
Same great taste, less filling.


This module is related to, but is not part of the C<Net::Twitter>
distribution.  It's API methods and API method documentation are generated
from C<Net::Twitter>'s internals.  It exists for those who cannot, or prefer
not to install L<Moose> and its dependencies.

You should consider upgrading to C<Net::Twitter> for additional functionality,
finer grained control over features, full backwards compatibility with older
versions of C<Net::Twitter>, and additional error handling options.

=head1 CLIENT CODE CHANGES REQUIRED

=head2 Legacy Lists API

Twitter re-implemented the Lists API using new endpoints and semantics. For backwards
compatibility, this version of C<Net::Twitter::Lite> defaults to the deprecated, legacy
endpoints and semantics.  It issues a warning if the C<legacy_lists_api> option to new
is not provided.

To enable the new Lists endpoints and semantics, pass C<(legacy_lists_api => 0)> to
C<new>.  To disable the warning, and keep the backwards compatible endpoints and
semantics, pass C<(legacy_lists_api => 1)> to C<new>.

The C<legacy_lists_api> option to C<new> sets the default for all lists API method
calls.  You can override the default an each API call by passing a C<-legacy_lists_api>
option set to 1 or 0.

Support for C<legacy_lists_api> option will be removed in a future version and the
option to C<new> will be silently ignored.

=head2 netrc option

The default C<apiurl> changed in version 0.08006.  The change should be
transparent to client code, unless you're using the C<netrc> option.  If so,
you'll need to either update the C<.netrc> entry and change the C<machine>
value from C<twitter.com> to C<api.twitter.com>, or set either the C<netrc>
or C<netrc_machine> options to C<twitter.com>.

    $nt = Net::Twitter::Lite->new(netrc_machine => 'twitter.com', netrc => 1);
    # -or-
    $nt = Net::Twitter::Lite->new(netrc => 'twitter.com');

=head2 OAuth requires callback parameter

Beginning with version 0.03, it is necessary for web applications using OAuth
authentication to pass the C<callback> parameter to C<get_authorization_url>.
In the absence of a callback parameter, when the user authorizes the
application a PIN number is displayed rather than redirecting the user back to
your site.

=head1 MIGRATING FROM NET::TWITTER 2.x

If you are migrating from Net::Twitter 2.12 (or an earlier version), you may
need to make some minor changes to your application code in order to user
Net::Twitter::Lite successfully.

The primary difference is in error handling.  Net::Twitter::Lite throws
exceptions on error.  It does not support the C<get_error>, C<http_code>, and
C<http_message> methods used in Net::Twitter 2.12 and prior versions.

Instead of

  # DON'T!
  my $friends = $nt->friends();
  if ( $friends ) {
      # process $friends
  }

wrap the API call in an eval block:

  # DO!
  my $friends = eval { $nt->friends() };
  if ( $friends ) {
      # process $friends
  }

Here's a much more complex example taken from application code using
Net::Twitter 2.12:

  # DON'T!
  my $friends = $nt->friends();
  if ( $friends ) {
      # process $friends
  }
  else {
      my $error = $nt->get_error;
      if ( ref $error ) {
          if ( ref($error) eq 'HASH' && exists $error->{error} ) {
              $error = $error->{error};
          }
          else {
              $error = 'Unexpected error type ' . ref($error);
          }
      }
      else {
          $error = $nt->http_code() . ": " . $nt->http_message;
      }
      warn "$error\n";
  }

The Net::Twitter::Lite equivalent is:

  # DO!
  eval {
      my $friends = $nt->friends();
      # process $friends
  };
  warn "$@\n" if $@;
  return;

In Net::Twitter::Lite, an error can always be treated as a string.  See
L<Net::Twitter::Lite::Error>.  The HTTP Status Code and HTTP Message are both
available.  Rather than accessing them via the Net::Twitter::Lite instance,
you access them via the Net::Twitter::Lite::Error instance thrown as an error.

For example:

  # DO!
  eval {
     my $friends = $nt->friends();
     # process $friends
  };
  if ( my $error = $@ ) {
      if ( blessed $error && $error->isa("Net::Twitter::Lite::Error)
           && $error->code() == 502 ) {
          $error = "Fail Whale!";
      }
      warn "$error\n";
  }

=head2 Unsupported Net::Twitter 2.12 options to C<new>

Net::Twitter::Lite does not support the following Net::Twitter 2.12 options to
C<new>.  It silently ignores them:

=over 4

=item no_fallback

If Net::Twitter::Lite is unable to create an instance of the class specified in
the C<useragent_class> option to C<new>, it dies, rather than falling back to
an LWP::UserAgent object.  You really don't want a failure to create the
C<useragent_class> you specified to go unnoticed.

=item twittervision

Net::Twitter::Lite does not support the TwitterVision API.  Use Net::Twitter,
instead, if you need it.

=item skip_arg_validation

Net::Twitter::Lite does not API parameter validation.  This is a feature.  If
Twitter adds a new option to an API method, you can use it immediately by
passing it in the HASH ref to the API call.

Net::Twitter::Lite relies on Twitter to validate its own parameters.  An
appropriate exception will be thrown if Twitter reports a parameter error.

=item die_on_validation

See L</skip_arg_validation>.  If Twitter returns an bad parameter error, an
appropriate exception will be thrown.

=item arrayref_on_error

This option allowed the following idiom in Net::Twitter 2.12:

  # DON'T!
  for my $friend ( @{ $nt->friends() } ) {
     # process $friend
  }

The equivalent Net::Twitter::Lite code is:

  # DO!
  eval {
      for my $friend ( @{ $nt->friends() } ) {
          # process $friend
      }
  };

=back

=head2 Unsupported Net::Twitter 2.12 methods

=over 4

=item clone

The C<clone> method was added to Net::Twitter 2.x to allow safe error handling
in an environment where concurrent requests are handled, for example, when
using LWP::UserAgent::POE as the C<useragent_class>.  Since Net::Twitter::Lite
throws exceptions instead of stashing them in the Net::Twitter::Lite instance,
it is safe in a current request environment, obviating the need for C<clone>.

=item get_error

=item http_code

=item http_message

These methods are replaced by Net::Twitter::Lite::Error.  An instance of that
class is thrown errors are encountered.

=back

=head1 METHODS AND ARGUMENTS

=over 4

=item new

This constructs a C<Net::Twitter::Lite> object.  It takes several named parameters,
all of them optional:

=over 4

=item username

This is the screen name or email used to authenticate with Twitter. Use this
option for Basic Authentication, only.

=item password

This is the password used to authenticate with Twitter. Use this option for
Basic Authentication, only.

=item consumer_key

A string containing the OAuth consumer key provided by Twitter when an application
is registered.  Use this option for OAuth authentication, only.

=item consumer_secret

A string containing the OAuth consumer secret. Use this option for OAuth authentication, only.
the C<OAuth> trait is included.

=item oauth_urls

A HASH ref of URLs to be used with OAuth authentication. Defaults to:

  {
      request_token_url => "http://twitter.com/oauth/request_token",
      authorization_url => "http://twitter.com/oauth/authorize",
      access_token_url  => "http://twitter.com/oauth/access_token",
      xauth_url         => "https://twitter.com/oauth/access_token",
  }

=item clientname

The value for the C<X-Twitter-Client-Name> HTTP header. It defaults to "Perl
Net::Twitter::Lite".

=item clientver

The value for the C<X-Twitter-Client-Version> HTTP header. It defaults to
current version of the C<Net::Twitter::Lite> module.

=item clienturl

The value for the C<X-Twitter-Client-URL> HTTP header. It defaults to the
search.cpan.org page for the C<Net::Twitter::Lite> distribution.

=item useragent_class

The C<LWP::UserAgent> compatible class used internally by C<Net::Twitter::Lite>.  It
defaults to "LWP::UserAgent".  For L<POE> based applications, consider using
"LWP::UserAgent::POE".

=item useragent_args

An HASH ref of arguments to pass to constructor of the class specified with
C<useragent_class>, above.  It defaults to {} (an empty HASH ref).

=item useragent

The value for C<User-Agent> HTTP header.  It defaults to
"Net::Twitter::Lite/[% VERSION %] (Perl)".

=item source

The value used in the C<source> parameter of API method calls. It is currently
only used in the C<update> method in the REST API.  It defaults to
"twitterpm".  This results in the text "from Net::Twitter" rather than "from
web" for status messages posted from C<Net::Twitter::Lite> when displayed via the
Twitter web interface.  The value for this parameter is provided by Twitter
when a Twitter application is registered.  See
L<http://apiwiki.twitter.com/FAQ#HowdoIget%E2%80%9CfromMyApp%E2%80%9DappendedtoupdatessentfrommyAPIapplication>.

=item apiurl

The URL for the Twitter API. This defaults to "http://twitter.com".

=item identica

If set to 1 (or any value that evaluates to true), apiurl defaults to
"http://identi.ca/api".

=item ssl

If set to 1, an SSL connection will be used for all API calls. Defaults to 0.

=item netrc

(Optional) Sets the I<machine> key to look up in C<.netrc> to obtain
credentials. If set to 1, Net::Twitter::Lite will use the value of the C<netrc_machine>
option (below).

   # in .netrc
   machine api.twitter.com
     login YOUR_TWITTER_USER_NAME
     password YOUR_TWITTER_PASSWORD
   machine semifor.twitter.com
     login semifor
     password SUPERSECRET

   # in your perl program
   $nt = Net::Twitter::Lite->new(netrc => 1);
   $nt = Net::Twitter::Lite->new(netrc => 'semifor.twitter.com');

=item netrc_machine

(Optional) Sets the C<machine> entry to look up in C<.netrc> when C<<netrc => 1>>
is used.  Defaults to C<api.twitter.com>.

=item legacy_lists_api

If set to 1, this option enables backwards compatibility by using the now deprecated
endpoints and semantics for lists API methods. If set to 0, the new endpoints and
semantics will be used. Only the new lists API methods are documented here.

If you do not provide this option to C<new> a warning is issued. Support for
this option and the legacy lists API methods will be removed in a future version.

=back

=back

=head2 BASIC AUTHENTICATION METHODS

=over 4

=item credentials($username, $password)

Set the credentials for Basic Authentication.  This is helpful for managing
multiple accounts.

=back

=head2 OAUTH METHODS

=over 4

=item authorized

Whether the client has the necessary credentials to be authorized.

Note that the credentials may be wrong and so the request may fail.

=item request_access_token

Returns list including the access token, access token secret, user_id, and
screen_name for this user. Takes a HASH of arguments. The C<verifier> argument
is required.  See L</OAUTH EXAMPLES>.

The user must have authorized this app at the url given by C<get_authorization_url> first.

For desktop applications, the Twitter authorization page will present the user
with a PIN number.  Prompt the user for the PIN number, and pass it as the
C<verifier> argument to request_access_token.

Returns the access token and access token secret but also sets them internally
so that after calling this method, you can immediately call API methods
requiring authentication.

=item get_authorization_url(callback => $callback_url)

Get the URL used to authorize the user.  Returns a C<URI> object.  For web
applications, pass your applications callback URL as the C<callback> parameter.
No arguments are required for desktop applications (C<callback> defaults to
C<oob>, out-of-band).

=item get_authentication_url(callback => $callback_url)

Get the URL used to authenticate the user with "Sign in with Twitter"
authentication flow.  Returns a C<URI> object.  For web applications, pass your
applications callback URL as the C<callback> parameter.  No arguments are
required for desktop applications (C<callback> defaults to C<oob>, out-of-band).

=item xauth($username, $password)

Exchanges a username and password for OAuth tokens. Your application must be
approved for XAuth access by Twitter for this method to work.  Twitter does not
grant XAuth access for web applications except for a brief period of time to
allow them to switch form Basic authentication to OAuth authentication.

=item access_token

Get or set the access token.

=item access_token_secret

Get or set the access token secret.

=item request_token

Get or set the request token.

=item request_token_secret

Get or set the request token secret.

=item access_token_url

Get or set the access_token URL.

=item authentication_url

Get or set the authentication URL.

=item authorization_url

Get or set the authorization URL.

=item request_token_url

Get or set the request_token URL.

=item xauth_url

Get or set the XAuth access token request URL.

=back

=head1 API METHODS AND ARGUMENTS

Most Twitter API methods take parameters.  All Net::Twitter::Lite API
methods will accept a HASH ref of named parameters as specified in the Twitter
API documentation.  For convenience, many Net::Twitter::Lite methods accept
simple positional arguments as documented, below.  The positional parameter
passing style is optional; you can always use the named parameters in a hash
ref if you prefer.

For example, the REST API method C<update> has one required parameter,
C<status>.  You can call C<update> with a HASH ref argument:

    $nt->update({ status => 'Hello world!' });

Or, you can use the convenient form:

    $nt->update('Hello world!');

The C<update> method also has an optional parameter, C<in_reply_to_status_id>.
To use it, you B<must> use the HASH ref form:

    $nt->update({ status => 'Hello world!', in_reply_to_status_id => $reply_to });

Convenience form is provided for the required parameters of all API methods.
So, these two calls are equivalent:

    $nt->friendship_exists({ user_a => $fred, user_b => $barney });
    $nt->friendship_exists($fred, $barney);

Many API methods have aliases.  You can use the API method name, or any of its
aliases, as you prefer.  For example, these calls are all equivalent:

    $nt->friendship_exists($fred, $barney);
    $nt->relationship_exists($fred, $barney);
    $nt->follows($fred, $barney);

Aliases support both the HASH ref and convenient forms:

    $nt->follows({ user_a => $fred, user_b => $barney });

Methods that support the C<page> parameter expect page numbers E<gt> 0.  Twitter silently
ignores invalid C<page> values.  So C<< { page => 0 } >> produces the same result
as C<< { page => 1 } >>.

In addition to the arguments specified for each API method described below, an
additional C<authenticate> parameter can be passed.  To request an
C<Authorization> header, pass C<< authenticated => 1 >>; to suppress an
authentication header, pass C<< authentication => 0 >>.  Even if requested, an
Authorization header will not be added if there are no user credentials
(username and password for Basic Authentication; access tokens for OAuth).

This is probably only useful for the L</rate_limit_status> method in the REST
API, since it returns different values for an authenticated and a
non-authenticated call.

=head1 REST API Methods

Several of these methods accept a user ID as the C<id> parameter.  The user ID
can be either a screen name, or the users numeric ID.  To disambiguate, use
the C<screen_name> or C<user_id> parameters, instead.

For example, These calls are equivalent:

    $nt->create_friend('perl_api');    # screen name
    $nt->create_friend(1564061);       # numeric ID
    $nt->create_friend({ id => 'perl_api' });
    $nt->create_friend({ screen_name => 'perl_api' });
    $nt->create_friend({ user_id     => 1564061 });

However user_id 911 and screen_name 911 are separate Twitter accounts.  These
calls are NOT equivalent:

    $nt->create_friend(911); # interpreted as screen name
    $nt->create_friend({ user_id => 911 }); # screen name: richellis

Whenever the C<id> parameter is required and C<user_id> and C<screen_name> are
also parameters, using any one of them satisfies the requirement.

[% INCLUDE APIDOC class='REST' %]

=head1 Search API Methods

[% INCLUDE APIDOC class='Search' %]

=head1 ERROR HANDLING

When C<Net::Twitter::Lite> encounters a Twitter API error or a network error, it
throws a C<Net::Twitter::Lite::Error> object.  You can catch and process these
exceptions by using C<eval> blocks and testing $@:

    eval {
        my $statuses = $nt->friends_timeline(); # this might die!

        for my $status ( @$statuses ) {
            #...
        }
    };
    if ( $@ ) {
        # friends_timeline encountered an error

        if ( blessed $@ && $@->isa('Net::Twitter::Lite::Error' ) {
            #... use the thrown error obj
            warn $@->error;
        }
        else {
            # something bad happened!
            die $@;
        }
    }

C<Net::Twitter::Lite::Error> stringifies to something reasonable, so if you don't need
detailed error information, you can simply treat $@ as a string:

    eval { $nt->update($status) };
    if ( $@ ) {
        warn "update failed because: $@\n";
    }


=head1 AUTHENTICATION

Net::Twitter::Lite currently supports both Basic Authentication and OAuth.  The
choice of authentication strategies is determined by the options passed to
C<new> or the use of the C<credentials> method.  An error will be thrown if
options for both strategies are provided.

=head2 BASIC AUTHENTICATION

To use Basic Authentication, pass the C<username> and C<password> options to
C<new>, or call C<credentials> to set them.  When Basic Authentication is used,
the C<Authorization> header is set on each authenticated API call.

=head2 OAUTH AUTHENTICATION

To use OAuth authentication, pass the C<consumer_key> and C<consumer_secret> options to new.

L<Net::OAuth::Simple> must be installed in order to use OAuth and an error will
be thrown if OAuth is attempted without it.  Net::Twitter::Lite does not
I<require> Net::OAuth::Simple, making OAuth an optional feature.

=head2 OAUTH EXAMPLES

See the C<examples> directory included in this distribution for full working
examples using OAuth.

Here's how to authorize users as a desktop app mode:

  use Net::Twitter::Lite;

  my $nt = Net::Twitter::Lite->new(
      consumer_key    => "YOUR-CONSUMER-KEY",
      consumer_secret => "YOUR-CONSUMER-SECRET",
  );

  # You'll save the token and secret in cookie, config file or session database
  my($access_token, $access_token_secret) = restore_tokens();
  if ($access_token && $access_token_secret) {
      $nt->access_token($access_token);
      $nt->access_token_secret($access_token_secret);
  }

  unless ( $nt->authorized ) {
      # The client is not yet authorized: Do it now
      print "Authorize this app at ", $nt->get_authorization_url, " and enter the PIN#\n";

      my $pin = <STDIN>; # wait for input
      chomp $pin;

      my($access_token, $access_token_secret, $user_id, $screen_name) =
          $nt->request_access_token(verifier => $pin);
      save_tokens($access_token, $access_token_secret); # if necessary
  }

  # Everything's ready

In a web application mode, you need to save the oauth_token and
oauth_token_secret somewhere when you redirect the user to the OAuth
authorization URL.

  sub twitter_authorize : Local {
      my($self, $c) = @_;

      my $nt = Net::Twitter::Lite->new(%param);
      my $url = $nt->get_authorization_url(callback => $callbackurl);

      $c->response->cookies->{oauth} = {
          value => {
              token => $nt->request_token,
              token_secret => $nt->request_token_secret,
          },
      };

      $c->response->redirect($url);
  }

And when the user returns back, you'll reset those request token and
secret to upgrade the request token to access token.

  sub twitter_auth_callback : Local {
      my($self, $c) = @_;

      my %cookie = $c->request->cookies->{oauth}->value;

      my $nt = Net::Twitter::Lite->new(%param);
      $nt->request_token($cookie{token});
      $nt->request_token_secret($cookie{token_secret});
      my $verifier = $c->req->param->{oauth_verifier};

      my($access_token, $access_token_secret, $user_id, $screen_name) =
          $nt->request_access_token(verifier => $verifier);

      # Save $access_token and $access_token_secret in the database associated with $c->user
  }

Later on, you can retrieve and reset those access token and secret
before calling any Twitter API methods.

  sub make_tweet : Local {
      my($self, $c) = @_;

      my($access_token, $access_token_secret) = ...;

      my $nt = Net::Twitter::Lite->new(%param);
      $nt->access_token($access_token);
      $nt->access_token_secret($access_token_secret);

      # Now you can call any Net::Twitter::Lite API methods on $nt
      my $status = $c->req->param('status');
      my $res = $nt->update({ status => $status });
  }

=head1 SEE ALSO

=over 4

=item L<Net::Twitter::Lite::Error>

The C<Net::Twitter::Lite> exception object.

=item L<http://apiwiki.twitter.com/Twitter-API-Documentation>

This is the official Twitter API documentation. It describes the methods and their
parameters in more detail and may be more current than the documentation provided
with this module.

=item L<LWP::UserAgent::POE>

This LWP::UserAgent compatible class can be used in L<POE> based application
along with Net::Twitter::Lite to provide concurrent, non-blocking requests.

=back

=head1 SUPPORT

Please report bugs to C<bug-net-twitter@rt.cpan.org>, or through the web
interface at L<https://rt.cpan.org/Dist/Display.html?Queue=Net-Twitter>.

Join the Net::Twitter IRC channel at L<irc://irc.perl.org/net-twitter>.

Follow perl_api: L<http://twitter.com/perl_api>.

Track Net::Twitter::Lite development at L<http://github.com/semifor/net-twitter-lite>.

=head1 AUTHOR

Marc Mims <marc@questright.com>

=head1 LICENSE

Copyright (c) 2009 Marc Mims

The Twitter API itself, and the description text used in this module is:

Copyright (c) 2009 Twitter

This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut

[% BLOCK APIDOC %]

=over 4

[% FOREACH method IN get_methods_for(class);
   NEXT IF method.deprecated -%]
=item B<[% method.name %]>

[% IF method.required.size > 0;
       pos_params = method.required;
   ELSIF method.params.size == 1;
       pos_params = method.params;
   ELSE;
       pos_params = [];
   END;
   IF pos_params.size -%]
=item B<[% method.name %]([% pos_params.join(", ") %])>

[% END -%]

[% FOREACH alias IN method.aliases -%]
=item alias: [% alias %]

[% END -%]

=over 4

=item Parameters: [% IF method.params.size %][% method.params.join(", ") %][% ELSE %]I<none>[% END %]

=item Required: [% IF method.required.size %][% method.required.join(", ") %][% ELSE %]I<none>[% END %]

=back

[% method.description %]

Returns: [% method.returns %]

[% END -%]

=back

[% END %]
