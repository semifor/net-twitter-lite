=head1 NAME

Net::Twitter::Lite::WithAPIv1_1 - A perl interface to the Twitter API v1.1

=head1 SYNOPSIS

  use Net::Twitter::Lite::WithAPIv1_1;
  use Scalar::Util 'blessed';

  my $nt = Net::Twitter::Lite::WithAPIv1_1->new(
      consumer_key        => $consumer_key,
      consumer_secret     => $consumer_secret,
      access_token        => $token,
      access_token_secret => $token_secret,
  );

  my $result = $nt->update('Hello, world!');

  eval {
      my $statuses = $nt->home_timeline({ since_id => $high_water, count => 100 });
      for my $status ( @$statuses ) {
          print "$status->{created_at} <$status->{user}{screen_name}> $status->{text}\n";
      }
  };
  if ( my $err = $@ ) {
      die $@ unless blessed $err && $err->isa('Net::Twitter::Lite::Error');

      warn "HTTP Response Code: ", $err->code, "\n",
           "HTTP Message......: ", $err->message, "\n",
           "Twitter error.....: ", $err->error, "\n";
  }

=head1 DESCRIPTION

This module provides a perl interface to the Twitter APIs.  See
L<https://dev.twitter.com/docs/api/1.1/overview> for a full description of the Twitter
APIs.

=head1 RETURN VALUES

Net::Twitter::Lite decodes the data structures returned by the Twitter API into
native perl data structures (HASH references and ARRAY references).  The full
layout of those data structures are not documented, here.  They change often,
usually with the addition of new elements, and documenting all of those
changes would be a significant challenge.

Instead, rely on the online Twitter API documentation and inspection of the
returned data.

The Twitter API online documentation is located at
L<https://dev.twitter.com/docs/api/1.1/overview>.

To inspect the data, use L<Data::Dumper> or similar module of your choice.
Here's a simple example using Data::Dumper:

    use Data::Dumper;

    my $r = $nt->search($search_term);
    print Dumper $r;

For more information on perl data structures, see L<perlreftut>, L<perldsc>,
and L<perllol>.

=head1 METHODS AND ARGUMENTS

=over 4

=item new

This constructs a C<Net::Twitter::Lite::WithAPIv1_1> object.  It takes several
named parameters, all of them optional:

=over 4

=item clientname

The value for the C<X-Twitter-Client-Name> HTTP header. It defaults to "Perl
Net::Twitter::Lite::WithAPIv1_1".  Note: This option has nothing to do with the "via" application
byline.

=item clientver

The value for the C<X-Twitter-Client-Version> HTTP header. It defaults to
current version of this module.

=item clienturl

The value for the C<X-Twitter-Client-URL> HTTP header. It defaults to the
search.cpan.org page for the C<Net::Twitter::Lite> distribution.

=item useragent_class

The C<LWP::UserAgent> compatible class used internally to make HTTP requests.
It defaults to "LWP::UserAgent".  For L<POE> based applications, consider using
"LWP::UserAgent::POE".

=item useragent_args

An HASH ref of arguments to pass to constructor of the class specified with
C<useragent_class>, above.  It defaults to {} (an empty HASH ref).

=item useragent

The value for C<User-Agent> HTTP header.  It defaults to
"Net::Twitter::Lite::WithAPIv1_1/$VERSION (Perl)", where C<$VERSION> is the current version of
this module.

=item source

Twitter on longer uses the C<source> parameter. Support for it remains in
this module for any compatible services that may use it.  It was
originally used by Twitter to provide an "via" application byline.

=item apiurl

The URL for the Twitter API. This defaults to "http://api.twitter.com/1". This
option is available when the C<API::RESTv1_1> trait is included.

=item apirealm

A string containing the Twitter API realm used for Basic Authentication. It
defaults to "Twitter API".  This option is available when the C<API::RESTv1_1>
trait is included.

=item identica

If set to 1, C<Net::Twitter::Lite::WithAPIv1_1> overrides the defaults for C<apiurl>, C<apihost>,
and C<apirealm> to "http://identi.ca/api", "identi.ca:80", and "Laconica API"
respectively.  It defaults to 0.

=item consumer_key

A string containing the OAuth consumer key provided by Twitter when an application
is registered.  This option is available when the C<OAuth> trait is included.

=item consumer_secret

A string containing the OAuth consumer secret.  This option is available when
the C<OAuth> trait is included.

=item ssl

If set to 1, an SSL connection will be used for all API calls. Defaults to 1.

=item netrc

(Optional) Sets the I<machine> key to look up in C<.netrc> to obtain
credentials. If set to 1, will use the value of the C<netrc_machine> option
(below).

   # in .netrc
   machine api.twitter.com
     login YOUR_TWITTER_USER_NAME
     password YOUR_TWITTER_PASSWORD
   machine semifor.twitter.com
     login semifor
     password SUPERSECRET

   # in your perl program
   $nt = Net::Twitter::Lite::WithAPIv1_1->new(netrc => 1);
   $nt = Net::Twitter::Lite::WithAPIv1_1->new(netrc => 'semifor.twitter.com');

=item netrc_machine

(Optional) Sets the C<machine> entry to look up in C<.netrc> when C<<netrc => 1>>
is used.  Defaults to C<api.twitter.com>.

=item wrap_result

(Optional) If set to 1, this option will return an
L<Net::Twitter::Lite::WrapResult> object, which provides both the Twitter API
result and the L<HTTP::Response> object for the API call. See
L<Net::Twitter::Lite::WrapResult> for details.

=back

=item credentials($username, $password)

Set the credentials for Basic Authentication.  This is helpful for managing
multiple accounts.

=back

=head1 AUTHENTICATION

With Twitter API version 1.1, all API calls require OAuth.  Other Twitter
compatible services, like Identi.ca, accept Basic Authentication.  So,
this module provides support for both.

For OAuth authentication, provide C<consumer_key> and C<consumer_secret>
arguments to C<new>.  Set C<access_token> and C<access_token_secret> for each
call, or provide them as arguments to C<new>.

For Basic Authentication, provide the C<username> and
C<password> options to L</new> or call the L</credentials> method.

In addition to the arguments specified for each API method described below, an
additional C<authenticate> parameter can be passed.  To request an
C<Authorization> header, pass C<< authenticate => 1 >>; to suppress an
authentication header, pass C<< authenticate => 0 >>.  Even if requested, an
Authorization header will not be added if there are no user credentials
(username and password for Basic Authentication; access tokens for OAuth).

This is probably only useful for non-Twitter sites that use the Twitter API and
support unauthenticated calls.

=head1 API METHODS AND ARGUMENTS

Most Twitter API methods take parameters.  All API methods will
accept a HASH ref of named parameters as specified in the Twitter API
documentation.  For convenience, many methods accept simple
positional arguments.  The positional parameter passing style is optional; you
can always use the named parameters in a HASH reference if you prefer.

You may pass any number of required parameters as positional parameters.  You
must pass them in the order specified in the documentation for each method.
Optional parameters must be passed as named parameters in a HASH reference.  The
HASH reference containing the named parameters must be the final parameter to
the method call.  Any required parameters not passed as positional parameters,
must be included in the named parameter HASH reference.

For example, the REST API method C<update> has one required parameter,
C<status>.  You can call C<update> with a HASH ref argument:

    $nt->update({ status => 'Hello world!' });

Or, you can use the convenient, positional parameter form:

    $nt->update('Hello world!');

The C<update> method also has an optional parameter, C<in_reply_to_status_id>.
To use it, you B<must> use the HASH ref form:

    $nt->update({ status => 'Hello world!', in_reply_to_status_id => $reply_to });

You may use the convenient positional form for the required C<status> parameter
with the optional parameters specified in the named parameter HASH reference:

    $nt->update('Hello world!', { in_reply_to_status_id => $reply_to });

Convenience form is provided for the required parameters of all API methods.
So, these two calls are equivalent:

    $nt->friendship_exists({ user_a => $fred, user_b => $barney });
    $nt->friendship_exists($fred, $barney);

Many API methods have aliases.  You can use the API method name, or any of its
aliases, as you prefer.  For example, these calls are all equivalent:

    $nt->friendship_exists($fred, $barney);
    $nt->relationship_exists($fred, $barney);
    $nt->follows($fred, $barney);

Aliases support both the HASH ref and convenient forms:

    $nt->follows({ user_a => $fred, user_b => $barney });


=head2 Synthetic Arguments

In addition to the arguments described in the Twitter API Documentation for
each API method, these additional I<synthetic> arguments are supported.

=over 4

=item authenticate

When set to 1, an Authorization header for the API call will be provided; when
set to 0, it will suppress the Authentication header.  This argument overrides
the defined authentication behavior for the API method.  It is probably only
useful for the C<rate_limit_satus> method which returns different values for
authenticated and unauthenticated calls.  See L</AUTHENTICATION> for more
details.

=back

=head1 API Methods

=over 4

=item B<account_settings>



=over 4

=item Parameters: I<none>

=item Required: I<none>

=back

Returns the current trend, geo and sleep time information for the
authenticating user.


Returns: HashRef

=item B<add_list_member>



=over 4

=item Parameters: list_id, slug, user_id, screen_name, owner_screen_name, owner_id

=item Required: I<none>

=back

Add a member to a list. The authenticated user must own the list to be able to
add members to it. Note that lists can't have more than 500 members.


Returns: User

=item B<add_place>

=item B<add_place(name, contained_within, token, lat, long)>



=over 4

=item Parameters: name, contained_within, token, lat, long, attribute:street_address, callback

=item Required: name, contained_within, token, lat, long

=back

Creates a new place object at the given latitude and longitude.

Before creating a place you need to query C<similar_places> with the latitude,
longitude and name of the place you wish to create. The query will return an
array of places which are similar to the one you wish to create, and a token.
If the place you wish to create isn't in the returned array you can use the
token with this method to create a new one.


Returns: Place


=item B<blocking>


=item alias: blocks_list


=over 4

=item Parameters: cursor, include_entities, skip_status

=item Required: I<none>

=back

Returns an array of user objects that the authenticating user is blocking.


Returns: ArrayRef[BasicUser]

=item B<blocking_ids>


=item alias: blocks_ids


=over 4

=item Parameters: cursor, stringify_ids

=item Required: I<none>

=back

Returns an array of numeric user ids the authenticating user is blocking.


Returns: ArrayRef[Int]

=item B<contributees>



=over 4

=item Parameters: user_id, screen_name, include_entities, skip_satus

=item Required: I<none>

=back

Returns an array of users that the specified user can contribute to.


Returns: ArrayRef[User]

=item B<contributors>



=over 4

=item Parameters: user_id, screen_name, include_entities, skip_satus

=item Required: I<none>

=back

Returns an array of users who can contribute to the specified account.


Returns: ArrayRef[User]

=item B<create_block>

=item B<create_block(id)>



=over 4

=item Parameters: user_id, screen_name, include_entities, skip_status

=item Required: id

=back

Blocks the user specified in the C<user_id> or C<screen_name> parameter as the
authenticating user.  Returns the blocked user when successful.  You can find
out more about blocking in the Twitter Support Knowledge Base.


Returns: BasicUser

=item B<create_favorite>

=item B<create_favorite(id)>



=over 4

=item Parameters: id, include_entities

=item Required: id

=back

Favorites the status specified in the ID parameter as the
authenticating user.  Returns the favorite status when successful.


Returns: Status

=item B<create_friend>


=item alias: follow

=item alias: follow_new

=item alias: create_friendship


=over 4

=item Parameters: user_id, screen_name, follow

=item Required: I<none>

=back

Follows the user specified in the C<user_id> or C<screen_name> parameter as the
authenticating user.  Returns the befriended user when successful.  Returns a
string describing the failure condition when unsuccessful.


Returns: BasicUser

=item B<create_list>

=item B<create_list(name)>



=over 4

=item Parameters: list_id, slug, name, mode, description, owner_screen_name, owner_id

=item Required: name

=back

Creates a new list for the authenticated user. Note that you can't create more
than 20 lists per account.


Returns: List

=item B<create_saved_search>

=item B<create_saved_search(query)>



=over 4

=item Parameters: query

=item Required: query

=back

Creates a saved search for the authenticated user.


Returns: SavedSearch

=item B<delete_list>



=over 4

=item Parameters: owner_screen_name, owner_id, list_id, slug

=item Required: I<none>

=back

Deletes the specified list. The authenticated user must own the list to be able
to destroy it.


Returns: List

=item B<delete_list_member>


=item alias: remove_list_member


=over 4

=item Parameters: list_id, slug, user_id, screen_name, owner_screen_name, owner_id

=item Required: I<none>

=back

Removes the specified member from the list. The authenticated user must be the
list's owner to remove members from the list.


Returns: User

=item B<destroy_block>

=item B<destroy_block(id)>



=over 4

=item Parameters: user_id, screen_name, include_entities, skip_status

=item Required: id

=back

Un-blocks the user specified in the C<user_id> or C<screen_name> parameter as
the authenticating user.  Returns the un-blocked user when successful.


Returns: BasicUser

=item B<destroy_direct_message>

=item B<destroy_direct_message(id)>



=over 4

=item Parameters: id, include_entities

=item Required: id

=back

Destroys the direct message specified in the required ID parameter.
The authenticating user must be the recipient of the specified direct
message.

Important: this method requires an access token with RWD (read, write, and
direct message) permissions.


Returns: DirectMessage

=item B<destroy_favorite>

=item B<destroy_favorite(id)>



=over 4

=item Parameters: id, include_entities

=item Required: id

=back

Un-favorites the status specified in the ID parameter as the
authenticating user.  Returns the un-favorited status.


Returns: Status

=item B<destroy_friend>

=item B<destroy_friend(id)>


=item alias: unfollow

=item alias: destroy_friendship


=over 4

=item Parameters: user_id, screen_name

=item Required: id

=back

Discontinues friendship with the user specified in the C<user_id> or
C<screen_name> parameter as the authenticating user.  Returns the un-friended
user when successful.  Returns a string describing the failure condition when
unsuccessful.


Returns: BasicUser

=item B<destroy_saved_search>

=item B<destroy_saved_search(id)>


=item alias: delete_saved_search


=over 4

=item Parameters: id

=item Required: id

=back

Destroys a saved search. The search, specified by C<id>, must be owned
by the authenticating user.


Returns: SavedSearch

=item B<destroy_status>

=item B<destroy_status(id)>



=over 4

=item Parameters: id, trim_user

=item Required: id

=back

Destroys the status specified by the required ID parameter.  The
authenticating user must be the author of the specified status.


Returns: Status

=item B<direct_messages>



=over 4

=item Parameters: since_id, max_id, count, page, include_entities, skip_status

=item Required: I<none>

=back

Returns a list of the 20 most recent direct messages sent to the authenticating
user including detailed information about the sending and recipient users.

Important: this method requires an access token with RWD (read, write, and
direct message) permissions.


Returns: ArrayRef[DirectMessage]

=item B<favorites>



=over 4

=item Parameters: user_id, screen_name, count, since_id, max_id, include_entities

=item Required: I<none>

=back

Returns the 20 most recent favorite statuses for the authenticating
user or user specified by the ID parameter.


Returns: ArrayRef[Status]

=item B<followers>


=item alias: followers_list


=over 4

=item Parameters: user_id, screen_name, cursor

=item Required: I<none>

=back

Returns a cursored collection of user objects for users following the specified user.


Returns: HashRef

=item B<followers_ids>



=over 4

=item Parameters: user_id, screen_name, cursor, stringify_ids

=item Required: I<none>

=back

Returns a reference to an array of numeric IDs for every user following the
specified user. The order of the IDs may change from call to call. To obtain
the screen names, pass the arrayref to L</lookup_users>.

Use the optional C<cursor> parameter to retrieve IDs in pages of 5000.  When
the C<cursor> parameter is used, the return value is a reference to a hash with
keys C<previous_cursor>, C<next_cursor>, and C<ids>.  The value of C<ids> is a
reference to an array of IDS of the user's followers. Set the optional C<cursor>
parameter to -1 to get the first page of IDs.  Set it to the prior return's
value of C<previous_cursor> or C<next_cursor> to page forward or backwards.
When there are no prior pages, the value of C<previous_cursor> will be 0.  When
there are no subsequent pages, the value of C<next_cursor> will be 0.


Returns: HashRef|ArrayRef[Int]

=item B<friends>


=item alias: friends_list


=over 4

=item Parameters: user_id, screen_name, cursor

=item Required: I<none>

=back

Returns a cursored collection of user objects for users followed by the specified user.


Returns: HashRef

=item B<friends_ids>


=item alias: following_ids


=over 4

=item Parameters: user_id, screen_name, cursor, stringify_ids

=item Required: I<none>

=back

Returns a reference to an array of numeric IDs for every user followed by the
specified user. The order of the IDs is reverse chronological.

Use the optional C<cursor> parameter to retrieve IDs in pages of 5000.  When
the C<cursor> parameter is used, the return value is a reference to a hash with
keys C<previous_cursor>, C<next_cursor>, and C<ids>.  The value of C<ids> is a
reference to an array of IDS of the user's friends. Set the optional C<cursor>
parameter to -1 to get the first page of IDs.  Set it to the prior return's
value of C<previous_cursor> or C<next_cursor> to page forward or backwards.
When there are no prior pages, the value of C<previous_cursor> will be 0.  When
there are no subsequent pages, the value of C<next_cursor> will be 0.


Returns: HashRef|ArrayRef[Int]

=item B<friendships_incoming>


=item alias: incoming_friendships


=over 4

=item Parameters: cursor, stringify_ids

=item Required: I<none>

=back

Returns an HASH ref with an array of numeric IDs in the C<ids> element for
every user who has a pending request to follow the authenticating user.


Returns: HashRef

=item B<friendships_outgoing>


=item alias: outgoing_friendships


=over 4

=item Parameters: cursor, stringify_ids

=item Required: I<none>

=back

Returns an HASH ref with an array of numeric IDs in the C<ids> element for
every protected user for whom the authenticating user has a pending follow
request.


Returns: HashRef

=item B<geo_id>

=item B<geo_id(id)>



=over 4

=item Parameters: id

=item Required: id

=back

Returns details of a place returned from the C<reverse_geocode> method.


Returns: HashRef

=item B<geo_search>



=over 4

=item Parameters: lat, long, query, ip, granularity, accuracy, max_results, contained_within, attribute:street_address, callback

=item Required: I<none>

=back

Search for places that can be attached to a statuses/update. Given a latitude
and a longitude pair, an IP address, or a name, this request will return a list
of all the valid places that can be used as the place_id when updating a
status.

Conceptually, a query can be made from the user's location, retrieve a list of
places, have the user validate the location he or she is at, and then send the
ID of this location with a call to statuses/update.

This is the recommended method to use find places that can be attached to
statuses/update. Unlike geo/reverse_geocode which provides raw data access,
this endpoint can potentially re-order places with regards to the user who
is authenticated. This approach is also preferred for interactive place
matching with the user.


Returns: HashRef

=item B<get_configuration>



=over 4

=item Parameters: I<none>

=item Required: I<none>

=back

Returns the current configuration used by Twitter including twitter.com slugs
which are not usernames, maximum photo resolutions, and t.co URL lengths.

It is recommended applications request this endpoint when they are loaded, but
no more than once a day.


Returns: HashRef

=item B<get_languages>



=over 4

=item Parameters: I<none>

=item Required: I<none>

=back

Returns the list of languages supported by Twitter along with their ISO 639-1
code. The ISO 639-1 code is the two letter value to use if you include lang
with any of your requests.


Returns: ArrayRef[Lanugage]

=item B<get_list>


=item alias: show_list


=over 4

=item Parameters: list_id, slug, owner_screen_name, owner_id

=item Required: I<none>

=back

Returns the specified list. Private lists will only be shown if the
authenticated user owns the specified list.


Returns: List

=item B<get_lists>

=item alias: all_subscriptions

=item alias: list_lists all_subscriptions


=over 4

=item Parameters: user_id, screen_name reverse

=item Required: I<none>

=back

Returns all lists the authenticating or specified user subscribes to, including
their own. The user is specified using the user_id or screen_name parameters.
If no user is given, the authenticating user is used.

A maximum of 100 results will be returned by this call. Subscribed lists are
returned first, followed by owned lists. This means that if a user subscribes
to 90 lists and owns 20 lists, this method returns 90 subscriptions and 10
owned lists. The reverse method returns owned lists first, so with C<reverse =>
1>, 20 owned lists and 80 subscriptions would be returned. If your goal is to
obtain every list a user owns or subscribes to, use <list_ownerships> and/or
C<list_subscriptions> instead.

Returns: ArrayRef[Lists]

=item B<get_privacy_policy>



=over 4

=item Parameters: I<none>

=item Required: I<none>

=back

Returns Twitter's privacy policy.


Returns: HashRef

=item B<get_tos>



=over 4

=item Parameters: I<none>

=item Required: I<none>

=back

Returns the Twitter Terms of Service. These are not the same as the Developer
Rules of the Road.


Returns: HashRef

=item B<home_timeline>



=over 4

=item Parameters: since_id, max_id, count, exclude_replies, contributor_details, include_entities, trim_user

=item Required: I<none>

=back

Returns the 20 most recent statuses, including retweets, posted by the
authenticating user and that user's friends.


Returns: ArrayRef[Status]

=item B<list_members>



=over 4

=item Parameters: list_id, slug, owner_screen_name, owner_id, cursor, include_entities, skip_status

=item Required: I<none>

=back

Returns the members of the specified list. Private list members will only be
shown if the authenticated user owns the specified list.


Returns: Hashref

=item B<list_memberships>



=over 4

=item Parameters: user_id, screen_name, cursor, filter_to_owned_lists

=item Required: I<none>

=back

Returns the lists the specified user has been added to. If user_id or
screen_name are not provided the memberships for the authenticating user are
returned.


Returns: Hashref

=item B<list_statuses>



=over 4

=item Parameters: list_id, slug, owner_screen_name, owner_id, since_id, max_id, count, include_entities, include_rts

=item Required: I<none>

=back

Returns tweet timeline for members of the specified list. Historically,
retweets were not available in list timeline responses but you can now use the
include_rts=true parameter to additionally receive retweet objects.


Returns: ArrayRef[Status]

=item B<list_subscribers>



=over 4

=item Parameters: list_id, slug, owner_screen_name, owner_id, cursor, include_entities, skip_status

=item Required: I<none>

=back

Returns the subscribers of the specified list. Private list subscribers will
only be shown if the authenticated user owns the specified list.


Returns: Hashref

=item B<lookup_friendships>



=over 4

=item Parameters: user_id, screen_name

=item Required: I<none>

=back

Returns the relationship of the authenticating user to the comma separated list
or ARRAY ref of up to 100 screen_names or user_ids provided. Values for
connections can be: following, following_requested, followed_by, none.
Requires authentication.


Returns: ArrayRef

=item B<lookup_users>



=over 4

=item Parameters: user_id, screen_name, include_entities

=item Required: I<none>

=back

Return up to 100 users worth of extended information, specified by either ID,
screen name, or combination of the two. The author's most recent status (if the
authenticating user has permission) will be returned inline.  This method is
rate limited to 1000 calls per hour.

This method will accept user IDs or screen names as either a comma delimited
string, or as an ARRAY ref.  It will also accept arguments in the normal
HASHREF form or as a simple list of named arguments.  I.e., any of the
following forms are acceptable:

    $nt->lookup_users({ user_id => '1234,6543,3333' });
    $nt->lookup_users(user_id => '1234,6543,3333');
    $nt->lookup_users({ user_id => [ 1234, 6543, 3333 ] });
    $nt->lookup_users({ screen_name => 'fred,barney,wilma' });
    $nt->lookup_users(screen_name => ['fred', 'barney', 'wilma']);

    $nt->lookup_users(
        screen_name => ['fred', 'barney' ],
        user_id     => '4321,6789',
    );


Returns: ArrayRef[User]

=item B<members_create_all>


=item alias: add_list_members


=over 4

=item Parameters: list_id, slug, owner_screen_name, owner_id

=item Required: I<none>

=back

Adds multiple members to a list, by specifying a reference to an array or a
comma-separated list of member ids or screen names. The authenticated user must
own the list to be able to add members to it. Note that lists can't have more
than 500 members, and you are limited to adding up to 100 members to a list at
a time with this method.


Returns: List

=item B<members_destroy_all>


=item alias: remove_list_members


=over 4

=item Parameters: list_id, slug, user_id, screen_name, owner_screen_name, owner_id

=item Required: I<none>

=back

Removes multiple members from a list, by specifying a reference to an array of
member ids or screen names, or a string of comma separated user ids or screen
names.  The authenticated user must own the list to be able to remove members
from it. Note that lists can't have more than 500 members, and you are limited
to removing up to 100 members to a list at a time with this method.

Please note that there can be issues with lists that rapidly remove and add
memberships. Take care when using these methods such that you are not too
rapidly switching between removals and adds on the same list.



Returns: List

=item B<mentions>


=item alias: replies

=item alias: mentions_timeline


=over 4

=item Parameters: since_id, max_id, count, trim_user, include_entities, contributor_details

=item Required: I<none>

=back

Returns the 20 most recent mentions (statuses containing @username) for the
authenticating user.


Returns: ArrayRef[Status]

=item B<new_direct_message>

=item B<new_direct_message(text)>



=over 4

=item Parameters: user_id, screen_name, text

=item Required: text

=back

Sends a new direct message to the specified user from the authenticating user.
Requires both the user and text parameters.  Returns the sent message when
successful.  In order to support numeric screen names, the C<screen_name> or
C<user_id> parameters may be used instead of C<user>.

Important: this method requires an access token with RWD (read, write, and
direct message) permissions.


Returns: DirectMessage

=item B<no_retweet_ids>



=over 4

=item Parameters: I<none>

=item Required: I<none>

=back

Returns an ARRAY ref of user IDs for which the authenticating user does not
want to receive retweets.


Returns: ArrayRef[UserIDs]

=item B<oembed>



=over 4

=item Parameters: id, url, maxwidth, hide_media, hide_thread, omit_script, align, related, lang

=item Required: I<none>

=back

Returns information allowing the creation of an embedded representation of a
Tweet on third party sites. See the L<oEmbed|http://oembed.com/> specification
for information about the response format.

While this endpoint allows a bit of customization for the final appearance of
the embedded Tweet, be aware that the appearance of the rendered Tweet may
change over time to be consistent with Twitter's L<Display
Requirements|https://dev.twitter.com/terms/display-requirements>. Do not rely
on any class or id parameters to stay constant in the returned markup.



Returns: Status

=item B<profile_banner>



=over 4

=item Parameters: user_id, screen_name

=item Required: I<none>

=back

Returns a hash reference mapping available size variations to URLs that can be
used to retrieve each variation of the banner.


Returns: HashRef

=item B<rate_limit_status>

=item B<rate_limit_status(resources)>



=over 4

=item Parameters: resources

=item Required: I<none>

=back

Returns the remaining number of API requests available to the
authenticated user before the API limit is reached for the current hour.

Use C<< ->rate_limit_status({ authenticate => 0 }) >> to force an
unauthenticated call, which will return the status for the IP address rather
than the authenticated user. (Note: for a web application, this is the server's
IP address.)


Returns: RateLimitStatus

=item B<remove_profile_banner>



=over 4

=item Parameters: I<none>

=item Required: I<none>

=back

Removes the uploaded profile banner for the authenticating user.


Returns: Nothing

=item B<report_spam>

=item B<report_spam(id)>



=over 4

=item Parameters: user_id, screen_name

=item Required: id

=back

The user specified in the id is blocked by the authenticated user and reported as a spammer.


Returns: User

=item B<retweet>

=item B<retweet(id)>



=over 4

=item Parameters: idtrim_user

=item Required: id

=back

Retweets a tweet.


Returns: Status

=item B<retweets>

=item B<retweets(id)>



=over 4

=item Parameters: id, count, trim_user

=item Required: id

=back

Returns up to 100 of the first retweets of a given tweet.


Returns: Arrayref[Status]

=item B<retweets_of_me>


=item alias: retweeted_of_me


=over 4

=item Parameters: since_id, max_id, count, trim_user, include_entities, include_user_entities

=item Required: I<none>

=back

Returns the 20 most recent tweets of the authenticated user that have been
retweeted by others.


Returns: ArrayRef[Status]

=item B<reverse_geocode>

=item B<reverse_geocode(lat, long)>



=over 4

=item Parameters: lat, long, accuracy, granularity, max_results, callback

=item Required: lat, long

=back

Search for places (cities and neighborhoods) that can be attached to a
statuses/update.  Given a latitude and a longitude, return a list of all the
valid places that can be used as a place_id when updating a status.
Conceptually, a query can be made from the user's location, retrieve a list of
places, have the user validate the location he or she is at, and then send the
ID of this location up with a call to statuses/update.

There are multiple granularities of places that can be returned --
"neighborhoods", "cities", etc.  At this time, only United States data is
available through this method.

=over 4

=item lat

Required.  The latitude to query about.  Valid ranges are -90.0 to +90.0 (North
is positive) inclusive.

=item long

Required. The longitude to query about.  Valid ranges are -180.0 to +180.0
(East is positive) inclusive.

=item accuracy

Optional. A hint on the "region" in which to search.  If a number, then this is
a radius in meters, but it can also take a string that is suffixed with ft to
specify feet.  If this is not passed in, then it is assumed to be 0m.  If
coming from a device, in practice, this value is whatever accuracy the device
has measuring its location (whether it be coming from a GPS, WiFi
triangulation, etc.).

=item granularity

Optional.  The minimal granularity of data to return.  If this is not passed
in, then C<neighborhood> is assumed.  C<city> can also be passed.

=item max_results

Optional.  A hint as to the number of results to return.  This does not
guarantee that the number of results returned will equal max_results, but
instead informs how many "nearby" results to return.  Ideally, only pass in the
number of places you intend to display to the user here.

=back



Returns: HashRef

=item B<saved_searches>



=over 4

=item Parameters: I<none>

=item Required: I<none>

=back

Returns the authenticated user's saved search queries.


Returns: ArrayRef[SavedSearch]

=item B<search>

=item B<search(q)>



=over 4

=item Parameters: q, count, callback, lang, locale, rpp, since_id, max_id, until, geocode, result_type, include_entities

=item Required: q

=back

Returns a HASH reference with some meta-data about the query including the
C<next_page>, C<refresh_url>, and C<max_id>. The statuses are returned in
C<results>.  To iterate over the results, use something similar to:

    my $r = $nt->search($searh_term);
    for my $status ( @{$r->{statuses}} ) {
        print "$status->{text}\n";
    }


Returns: HashRef

=item B<sent_direct_messages>


=item alias: direct_messages_sent


=over 4

=item Parameters: since_id, max_id, page, count, include_entities

=item Required: I<none>

=back

Returns a list of the 20 most recent direct messages sent by the authenticating
user including detailed information about the sending and recipient users.

Important: this method requires an access token with RWD (read, write, and
direct message) permissions.


Returns: ArrayRef[DirectMessage]

=item B<show_direct_message>

=item B<show_direct_message(id)>



=over 4

=item Parameters: id

=item Required: id

=back

Returns a single direct message, specified by an id parameter. Like
the C<direct_messages> request, this method will include the
user objects of the sender and recipient.  Requires authentication.

Important: this method requires an access token with RWD (read, write, and
direct message) permissions.


Returns: HashRef

=item B<show_friendship>


=item alias: show_relationship


=over 4

=item Parameters: source_id, source_screen_name, target_id, target_screen_name

=item Required: I<none>

=back

Returns detailed information about the relationship between two users.


Returns: Relationship

=item B<show_list_member>


=item alias: is_list_member


=over 4

=item Parameters: owner_screen_name, owner_id, list_id, slug, user_id, screen_name, include_entities, skip_status

=item Required: I<none>

=back

Check if the specified user is a member of the specified list. Returns the user or undef.


Returns: Maybe[User]

=item B<show_list_subscriber>


=item alias: is_list_subscriber

=item alias: is_subscriber_lists


=over 4

=item Parameters: owner_screen_name, owner_id, list_id, slug, user_id, screen_name, include_entities, skip_status

=item Required: I<none>

=back

Returns the user if they are a subscriber.


Returns: User

=item B<show_saved_search>

=item B<show_saved_search(id)>



=over 4

=item Parameters: id

=item Required: id

=back

Retrieve the data for a saved search, by C<id>, owned by the authenticating user.


Returns: SavedSearch

=item B<show_status>

=item B<show_status(id)>



=over 4

=item Parameters: id, trim_user, include_entities, include_my_retweet

=item Required: id

=back

Returns a single status, specified by the id parameter.  The
status's author will be returned inline.


Returns: Status

=item B<show_user>



=over 4

=item Parameters: user_id, screen_name, include_entities

=item Required: I<none>

=back

Returns extended information of a given user, specified by ID or screen
name as per the required id parameter.  This information includes
design settings, so third party developers can theme their widgets
according to a given user's preferences. You must be properly
authenticated to request the page of a protected user.


Returns: ExtendedUser

=item B<similar_places>

=item B<similar_places(lat, long, name)>



=over 4

=item Parameters: lat, long, name, contained_within, attribute:street_address, callback

=item Required: lat, long, name

=back

Locates places near the given coordinates which are similar in name.

Conceptually you would use this method to get a list of known places to choose
from first. Then, if the desired place doesn't exist, make a request to
C<add_place> to create a new one.

The token contained in the response is the token needed to be able to create a
new place.


Returns: HashRef

=item B<subscribe_list>



=over 4

=item Parameters: owner_screen_name, owner_id, list_id, slug

=item Required: I<none>

=back

Subscribes the authenticated user to the specified list.


Returns: List

=item B<list_subscriptions>



=over 4

=item Parameters: user_id, screen_name, count, cursor

=item Required: I<none>

=item Aliases: subscriptions

=back

Obtain a collection of the lists the specified user is subscribed to, 20 lists
per page by default. Does not include the user's own lists.


Returns: ArrayRef[List]

=item B<list_ownerships>

=over 4

=item Parameters: user_id screen_name count cursor

=back

Obtain a collection of the lists owned by the specified Twitter user. Private
lists will only be shown if the authenticated user is also the owner of the lists.

Returns: Hashref

=item B<suggestion_categories>



=over 4

=item Parameters: I<none>

=item Required: I<none>

=back

Returns the list of suggested user categories. The category slug can be used in
the C<user_suggestions> API method get the users in that category .  Does not
require authentication.


Returns: ArrayRef

=item B<trends_available>



=over 4

=item Parameters: I<none>

=item Required: I<none>

=back

Returns the locations with trending topic information. The response is an
array of "locations" that encode the location's WOEID (a Yahoo!  Where On Earth
ID L<http://developer.yahoo.com/geo/geoplanet/>) and some other human-readable
information such as a the location's canonical name and country.

For backwards compatibility, this method accepts optional C<lat> and C<long>
parameters. You should call C<trends_closest> directly, instead.

Use the WOEID returned in the location object to query trends for a specific
location.


Returns: ArrayRef[Location]

=item B<trends_closest>



=over 4

=item Parameters: lat, long

=item Required: I<none>

=back

Returns the locations with trending topic information. The response is an array
of "locations" that encode the location's WOEID (a Yahoo!  Where On Earth ID
L<http://developer.yahoo.com/geo/geoplanet/>) and some other human-readable
information such as a the location's canonical name and country. The results
are sorted by distance from that location, nearest to farthest.

Use the WOEID returned in the location object to query trends for a specific
location.


Returns: ArrayRef[Location]

=item B<trends_place>

=item B<trends_place(id)>


=item alias: trends_location


=over 4

=item Parameters: id, exclude

=item Required: id

=back

Returns the top 10 trending topics for a specific WOEID. The response is an
array of "trend" objects that encode the name of the trending topic, the query
parameter that can be used to search for the topic on Search, and the direct
URL that can be issued against Search.  This information is cached for five
minutes, and therefore users are discouraged from querying these endpoints
faster than once every five minutes.  Global trends information is also
available from this API by using a WOEID of 1.


Returns: ArrayRef[Trend]

=item B<unsubscribe_list>



=over 4

=item Parameters: list_id, slug, owner_screen_name, owner_id

=item Required: I<none>

=back

Unsubscribes the authenticated user from the specified list.


Returns: List

=item B<update>

=item B<update(status)>



=over 4

=item Parameters: status, lat, long, place_id, display_coordinates, in_reply_to_status_id, trim_user

=item Required: status

=back


Updates the authenticating user's status.  Requires the status parameter
specified.  A status update with text identical to the authenticating
user's current status will be ignored.

=over 4

=item status

Required.  The text of your status update. URL encode as necessary. Statuses
over 140 characters will cause a 403 error to be returned from the API.

=item in_reply_to_status_id

Optional. The ID of an existing status that the update is in reply to.  o Note:
This parameter will be ignored unless the author of the tweet this parameter
references is mentioned within the status text. Therefore, you must include
@username, where username is the author of the referenced tweet, within the
update.

=item lat

Optional. The location's latitude that this tweet refers to.  The valid ranges
for latitude is -90.0 to +90.0 (North is positive) inclusive.  This parameter
will be ignored if outside that range, if it is not a number, if geo_enabled is
disabled, or if there not a corresponding long parameter with this tweet.

=item long

Optional. The location's longitude that this tweet refers to.  The valid ranges
for longitude is -180.0 to +180.0 (East is positive) inclusive.  This parameter
will be ignored if outside that range, if it is not a number, if geo_enabled is
disabled, or if there not a corresponding lat parameter with this tweet.

=item place_id

Optional. The place to attach to this status update.  Valid place_ids can be
found by querying C<reverse_geocode>.

=item display_coordinates

Optional. By default, geo-tweets will have their coordinates exposed in the
status object (to remain backwards compatible with existing API applications).
To turn off the display of the precise latitude and longitude (but keep the
contextual location information), pass C<display_coordinates => 0> on the
status update.

=back



Returns: Status

=item B<update_account_settings>



=over 4

=item Parameters: trend_location_woid, sleep_time_enabled, start_sleep_time, end_sleep_time, time_zone, lang

=item Required: I<none>

=back

Updates the authenticating user's settings.


Returns: HashRef

=item B<update_delivery_device>

=item B<update_delivery_device(device)>



=over 4

=item Parameters: device, include_entities

=item Required: device

=back

Sets which device Twitter delivers updates to for the authenticating user.
Sending none as the device parameter will disable SMS updates.


Returns: BasicUser

=item B<update_friendship>



=over 4

=item Parameters: user_id, screen_name, device, retweets

=item Required: I<none>

=back

Allows you enable or disable retweets and device notifications from the
specified user. All other values are assumed to be false.  Requires
authentication.


Returns: HashRef

=item B<update_list>



=over 4

=item Parameters: list_id, slug, name, mode, description, owner_screen_name, owner_id

=item Required: I<none>

=back

Updates the specified list. The authenticated user must own the list to be able
to update it.


Returns: List

=item B<update_profile>



=over 4

=item Parameters: name, url, location, description, include_entities, skip_status

=item Required: I<none>

=back

Sets values that users are able to set under the "Account" tab of their
settings page. Only the parameters specified will be updated; to only
update the "name" attribute, for example, only include that parameter
in your request.


Returns: ExtendedUser

=item B<update_profile_background_image>



=over 4

=item Parameters: image, tile, include_entities, skip_status, use

=item Required: I<none>

=back

Updates the authenticating user's profile background image. The C<image>
parameter must be an arrayref with the same interpretation as the C<image>
parameter in the C<update_profile_image> method. See that method's
documentation for details. The C<use> parameter allows you to specify whether
to use the uploaded profile background or not.


Returns: ExtendedUser

=item B<update_profile_banner>

=item B<update_profile_banner(banner)>



=over 4

=item Parameters: banner, width, height, offset_left, offset_top

=item Required: banner

=back

Uploads a profile banner on behalf of the authenticating user.  The C<image>
parameter is an arrayref with the following interpretation:

  [ $file ]
  [ $file, $filename ]
  [ $file, $filename, Content_Type => $mime_type ]
  [ undef, $filename, Content_Type => $mime_type, Content => $raw_image_data ]

The first value of the array (C<$file>) is the name of a file to open.  The
second value (C<$filename>) is the name given to Twitter for the file.  If
C<$filename> is not provided, the basename portion of C<$file> is used.  If
C<$mime_type> is not provided, it will be provided automatically using
L<LWP::MediaTypes::guess_media_type()>.

C<$raw_image_data> can be provided, rather than opening a file, by passing
C<undef> as the first array value.


Returns: Nothing

=item B<update_profile_colors>



=over 4

=item Parameters: profile_background_color, profile_text_color, profile_link_color, profile_sidebar_fill_color, profile_sidebar_border_color, include_entities, skip_status

=item Required: I<none>

=back

Sets one or more hex values that control the color scheme of the
authenticating user's profile page on twitter.com.  These values are
also returned in the /users/show API method.


Returns: ExtendedUser

=item B<update_profile_image>

=item B<update_profile_image(image)>



=over 4

=item Parameters: image, include_entities, skip_status

=item Required: image

=back

Updates the authenticating user's profile image.  The C<image> parameter is an
arrayref with the following interpretation:

  [ $file ]
  [ $file, $filename ]
  [ $file, $filename, Content_Type => $mime_type ]
  [ undef, $filename, Content_Type => $mime_type, Content => $raw_image_data ]

The first value of the array (C<$file>) is the name of a file to open.  The
second value (C<$filename>) is the name given to Twitter for the file.  If
C<$filename> is not provided, the basename portion of C<$file> is used.  If
C<$mime_type> is not provided, it will be provided automatically using
L<LWP::MediaTypes::guess_media_type()>.

C<$raw_image_data> can be provided, rather than opening a file, by passing
C<undef> as the first array value.


Returns: ExtendedUser

=item B<update_with_media>

=item B<update_with_media(status, media[])>



=over 4

=item Parameters: status, media[], possibly_sensitive, in_reply_to_status_id, lat, long, place_id, display_coordinates

=item Required: status, media[]

=back

Updates the authenticating user's status and attaches media for upload.

The C<media[]> parameter is an arrayref with the following interpretation:

  [ $file ]
  [ $file, $filename ]
  [ $file, $filename, Content_Type => $mime_type ]
  [ undef, $filename, Content_Type => $mime_type, Content => $raw_image_data ]

The first value of the array (C<$file>) is the name of a file to open.  The
second value (C<$filename>) is the name given to Twitter for the file.  If
C<$filename> is not provided, the basename portion of C<$file> is used.  If
C<$mime_type> is not provided, it will be provided automatically using
L<LWP::MediaTypes::guess_media_type()>.

C<$raw_image_data> can be provided, rather than opening a file, by passing
C<undef> as the first array value.

The Tweet text will be rewritten to include the media URL(s), which will reduce
the number of characters allowed in the Tweet text. If the URL(s) cannot be
appended without text truncation, the tweet will be rejected and this method
will return an HTTP 403 error.


Returns: Status

=item B<user_suggestions>

=item B<user_suggestions(category)>


=item alias: follow_suggestions


=over 4

=item Parameters: category, lang

=item Required: category

=back

Access the users in a given category of the Twitter suggested user list and
return their most recent status if they are not a protected user. Currently
supported values for optional parameter C<lang> are C<en>, C<fr>, C<de>, C<es>,
C<it>.  Does not require authentication.


Returns: ArrayRef

=item B<user_suggestions_for>

=item B<user_suggestions_for(category)>


=item alias: follow_suggestions


=over 4

=item Parameters: category, lang

=item Required: category

=back

Access the users in a given category of the Twitter suggested user list.


Returns: ArrayRef

=item B<user_timeline>



=over 4

=item Parameters: user_id, screen_name, since_id, max_id, count, trim_user, exclude_replies, include_rts, contributor_details

=item Required: I<none>

=back

Returns the 20 most recent statuses posted by the authenticating user, or the
user specified by C<screen_name> or C<user_id>.


Returns: ArrayRef[Status]

=item B<users_search>

=item B<users_search(q)>


=item alias: find_people

=item alias: search_users


=over 4

=item Parameters: q, per_page, page, count, include_entities

=item Required: q

=back

Run a search for users similar to Find People button on Twitter.com; the same
results returned by people search on Twitter.com will be returned by using this
API (about being listed in the People Search).  It is only possible to retrieve
the first 1000 matches from this API.


Returns: ArrayRef[Users]

=item B<verify_credentials>



=over 4

=item Parameters: include_entities, skip_status

=item Required: I<none>

=back

Returns an HTTP 200 OK response code and a representation of the
requesting user if authentication was successful; returns a 401 status
code and an error message if not.  Use this method to test if supplied
user credentials are valid.


Returns: ExtendedUser


=back




=over 4

=item B<update_with_media>

=item B<update_with_media(status, media)>



=over 4

=item Parameters: status, media[], possibly_sensitive, in_reply_to_status_id, lat, long, place_id, display_coordinates

=item Required: status, media

=back

Updates the authenticating user's status and attaches media for upload.

The C<media[]> parameter is an arrayref with the following interpretation:

  [ $file ]
  [ $file, $filename ]
  [ $file, $filename, Content_Type => $mime_type ]
  [ undef, $filename, Content_Type => $mime_type, Content => $raw_image_data ]

The first value of the array (C<$file>) is the name of a file to open.  The
second value (C<$filename>) is the name given to Twitter for the file.  If
C<$filename> is not provided, the basename portion of C<$file> is used.  If
C<$mime_type> is not provided, it will be provided automatically using
L<LWP::MediaTypes::guess_media_type()>.

C<$raw_image_data> can be provided, rather than opening a file, by passing
C<undef> as the first array value.

The Tweet text will be rewritten to include the media URL(s), which will reduce
the number of characters allowed in the Tweet text. If the URL(s) cannot be
appended without text truncation, the tweet will be rejected and this method
will return an HTTP 403 error.


Returns: Status


=back



=head1 Search API Methods

These methods are provided when trait C<API::Search> is included in the C<traits>
option to C<new>.



=over 4

=item B<search>

=item B<search(q)>



=over 4

=item Parameters: q, callback, lang, locale, rpp, page, since_id, until, geocode, show_user, result_type

=item Required: q

=back

Returns a HASH reference with some meta-data about the query including the
C<next_page>, C<refresh_url>, and C<max_id>. The statuses are returned in
C<results>.  To iterate over the results, use something similar to:

    my $r = $nt->search($searh_term);
    for my $status ( @{$r->{results}} ) {
        print "$status->{text}\n";
    }


Returns: HashRef


=back


=head1 TwitterVision API Methods

These methods are provided when trait C<API::TwitterVision> is included in the
C<traits> option to C<new>.



=over 4

=item B<current_status>

=item B<current_status(id)>



=over 4

=item Parameters: id, callback

=item Required: id

=back

Get the current location and status of a user.


Returns: HashRef

=item B<update_twittervision>

=item B<update_twittervision(location)>



=over 4

=item Parameters: location

=item Required: location

=back

Updates the location for the authenticated user.


Returns: HashRef


=back


=head1 ERROR HANDLING

When a Twitter API error or a network error is encountered,
C<Net::Twitter::Lite::Error> object is thrown.  You can catch and process
these exceptions by using C<eval> blocks and testing $@:

    eval {
        my $statuses = $nt->friends_timeline(); # this might die!

        for my $status ( @$statuses ) {
            #...
        }
    };
    if ( $@ ) {
        # friends_timeline encountered an error

        if ( blessed $@ && $@->isa('Net::Twitter::Lite::Error') ) {
            #... use the thrown error obj
            warn $@->error;
        }
        else {
            # something bad happened!
            die $@;
        }
    }

C<Net::Twitter::Lite::Error> stringifies to something reasonable, so if you don't need
detailed error information, you can simply treat $@ as a string:

    eval { $nt->update($status) };
    if ( $@ ) {
        warn "update failed because: $@\n";
    }

=head1 SEE ALSO

=over 4

=item L<Net::Twitter::Lite::Error>

The C<Net::Twitter::Lite> exception object.

=item L<http://dev.twitter.com/rest/reference>

This is the official Twitter API documentation. It describes the methods and their
parameters in more detail and may be more current than the documentation provided
with this module.

=item L<LWP::UserAgent::POE>

This LWP::UserAgent compatible class can be used in L<POE> based application
along with Net::Twitter::Lite to provide concurrent, non-blocking requests.

=item L<Catalyst::Authentication::Credential::Twitter>

This module, by Jesse Stay, provides Twitter OAuth authentication support for
the popular L<Catalyst> web application framework.

=item L<AnyEvent::Twitter::Stream>

An excellent module for Twitter Streaming API support.

=back

=head1 SUPPORT

Please report bugs at L<https://github.com/semifor/net-twitter-lite/issues>.

Join the #net-twitter IRC channel on irc.perl.org.

Follow perl_api: L<http://twitter.com/perl_api>.

Track development at L<http://github.com/semifor/net-twitter-lite>.

=head1 AUTHOR

Marc Mims <marc@questright.com> (@semifor on Twitter)

=head1 CONTRIBUTORS

Marek Foss (@f055)

=head1 LICENSE

Copyright (c) 2013 Marc Mims

This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

